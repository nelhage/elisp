;;; chatgpt-shell-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from chatgpt-shell.el

(autoload 'chatgpt-shell-swap-system-prompt "chatgpt-shell" "\
Swap system prompt from `chatgpt-shell-system-prompts'." t)
(autoload 'chatgpt-shell-load-awesome-prompts "chatgpt-shell" "\
Load `chatgpt-shell-system-prompts' from awesome-chatgpt-prompts.

Downloaded from https://github.com/f/awesome-chatgpt-prompts." t)
(autoload 'chatgpt-shell-version "chatgpt-shell" "\
Show `chatgpt-shell' mode version." t)
(autoload 'chatgpt-shell "chatgpt-shell" "\
Start a ChatGPT shell interactive command.

With NEW-SESSION, start a new session.

(fn &optional NEW-SESSION)" t)
(autoload 'chatgpt-shell-prompt "chatgpt-shell" "\
Make a ChatGPT request from the minibuffer.

If region is active, append to prompt." t)
(autoload 'chatgpt-shell-prompt-appending-kill-ring "chatgpt-shell" "\
Make a ChatGPT request from the minibuffer appending kill ring." t)
(autoload 'chatgpt-shell-describe-code "chatgpt-shell" "\
Describe code from region using ChatGPT." t)
(autoload 'chatgpt-shell-refactor-code "chatgpt-shell" "\
Refactor code from region using ChatGPT." t)
(autoload 'chatgpt-shell-write-git-commit "chatgpt-shell" "\
Write commit from region using ChatGPT." t)
(autoload 'chatgpt-shell-generate-unit-test "chatgpt-shell" "\
Generate unit-test for the code from region using ChatGPT." t)
(autoload 'chatgpt-shell-proofread-paragraph-or-region "chatgpt-shell" "\
Proofread text from region or current paragraph using ChatGPT.

See `chatgpt-shell-prompt-header-proofread-region' to change prompt or language." t)
(autoload 'chatgpt-shell-eshell-whats-wrong-with-last-command "chatgpt-shell" "\
Ask ChatGPT what's wrong with the last eshell command." t)
(autoload 'chatgpt-shell-eshell-summarize-last-command-output "chatgpt-shell" "\
Ask ChatGPT to summarize the last command output." t)
(autoload 'chatgpt-shell-send-region "chatgpt-shell" "\
Send region to ChatGPT.
With prefix REVIEW prompt before sending to ChatGPT.

(fn REVIEW)" t)
(autoload 'chatgpt-shell-send-and-review-region "chatgpt-shell" "\
Send region to ChatGPT, review before submitting." t)
(autoload 'chatgpt-shell-add-??-command-to-eshell "chatgpt-shell" "\
Add `??' command to `eshell'.")
(autoload 'chatgpt-shell-prompt-compose "chatgpt-shell" "\
Compose and send prompt from a dedicated buffer.

With PREFIX, clear existing history (wipe asociated shell history).

Whenever `chatgpt-shell-prompt-compose' is invoked, appends any active
region (or flymake issue at point) to compose buffer.

Additionally, if point is at an error/warning raised by flymake,
automatically add context (error/warning + code) to expedite ChatGPT
for help to fix the issue.

The compose buffer always shows the latest interaction, but it's
backed by the shell history.  You can always switch to the shell buffer
to view the history.

Editing: While compose buffer is in in edit mode, it offers a couple
of magit-like commit buffer bindings.

 `\\[chatgpt-shell-prompt-compose-send-buffer]` to send the buffer query.
 `\\[chatgpt-shell-prompt-compose-cancel]` to cancel compose buffer.
 `\\[chatgpt-shell-prompt-compose-search-history]` search through history.
 `\\[chatgpt-shell-prompt-compose-previous-history]` cycle through previous
item in history.
 `\\[chatgpt-shell-prompt-compose-next-history]` cycle through next item in
history.

Read-only: After sending a query, the buffer becomes read-only and
enables additional key bindings.

 `\\[chatgpt-shell-prompt-compose-send-buffer]` After sending offers to abort
query in-progress.
 `\\[View-quit]` Exits the read-only buffer.
 `\\[chatgpt-shell-prompt-compose-retry]` Refresh (re-send the query).  Useful
to retry on disconnects.
 `\\[chatgpt-shell-prompt-compose-next-item]` Jump to next source block.
 `\\[chatgpt-shell-prompt-compose-previous-item]` Jump to next previous block.
 `\\[chatgpt-shell-prompt-compose-reply]` Reply to follow-up with additional questions.
 `\\[chatgpt-shell-prompt-compose-request-entire-snippet]` Send \"Show entire snippet\" query.
 `\\[chatgpt-shell-prompt-compose-insert-block-at-point]` Insert block at point at last known location.
 `\\[chatgpt-shell-prompt-compose-request-more]` Send \"Show me more\" query.
 `\\[chatgpt-shell-prompt-compose-other-buffer]` Jump to other buffer (ie. the shell itself).
 `\\[chatgpt-shell-mark-block]` Mark block at point.

(fn PREFIX)" t)
(autoload 'chatgpt-shell-japanese-ocr-lookup "chatgpt-shell" "\
Select a region of the screen to OCR and look up in Japanese." t)
(autoload 'chatgpt-shell-japanese-audio-lookup "chatgpt-shell" "\
Transcribe audio at current file (buffer or `dired') and look up in Japanese." t)
(autoload 'chatgpt-shell-describe-image "chatgpt-shell" "\
Request OpenAI to describe image.

When visiting a buffer with an image, send that.

If command invoked with prefix, CAPTURE a screenshot.

If in a `dired' buffer, use selection (single image only for now).

(fn &optional CAPTURE)" t)
(autoload 'chatgpt-shell-fix-error-at-point "chatgpt-shell" "\
Fixes flymake error at point." t)
(autoload 'chatgpt-shell-quick-insert "chatgpt-shell" "\
Request from minibuffer and insert response into current buffer.

Optionally include any CONTEXT to consider.

(fn &optional CONTEXT)" t)
(register-definition-prefixes "chatgpt-shell" '("chatgpt-shell-"))


;;; Generated autoloads from chatgpt-shell-anthropic.el

(register-definition-prefixes "chatgpt-shell-anthropic" '("chatgpt-shell-anthropic-"))


;;; Generated autoloads from chatgpt-shell-deepseek.el

(register-definition-prefixes "chatgpt-shell-deepseek" '("chatgpt-shell-deepseek-"))


;;; Generated autoloads from chatgpt-shell-google.el

(register-definition-prefixes "chatgpt-shell-google" '("chatgpt-shell-google-"))


;;; Generated autoloads from chatgpt-shell-kagi.el

(register-definition-prefixes "chatgpt-shell-kagi" '("chatgpt-shell-kagi-"))


;;; Generated autoloads from chatgpt-shell-ollama.el

(register-definition-prefixes "chatgpt-shell-ollama" '("chatgpt-shell-ollama-"))


;;; Generated autoloads from chatgpt-shell-openai.el

(register-definition-prefixes "chatgpt-shell-openai" '("chatgpt-shell-"))


;;; Generated autoloads from chatgpt-shell-openrouter.el

(register-definition-prefixes "chatgpt-shell-openrouter" '("chatgpt-shell-openrouter-"))


;;; Generated autoloads from chatgpt-shell-perplexity.el

(register-definition-prefixes "chatgpt-shell-perplexity" '("chatgpt-shell-perplexity-"))


;;; Generated autoloads from chatgpt-shell-prompt-compose.el

(register-definition-prefixes "chatgpt-shell-prompt-compose" '("chatgpt-shell-"))

;;; End of scraped data

(provide 'chatgpt-shell-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; chatgpt-shell-autoloads.el ends here

;;; inf-ruby-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from inf-ruby.el

(defvar ruby-source-modes '(ruby-mode enh-ruby-mode) "\
Used to determine if a buffer contains Ruby source code.
If it's loaded into a buffer that is in one of these major modes, it's
considered a ruby source file by `ruby-load-file'.
Used by these commands to determine defaults.")
(autoload 'inf-ruby-setup-keybindings "inf-ruby" "\
Hook up `inf-ruby-minor-mode' to each of `ruby-source-modes'.")
(autoload 'inf-ruby-minor-mode "inf-ruby" "\
Minor mode for interacting with the inferior process buffer.

The following commands are available:

\\{inf-ruby-minor-mode-map}

This is a minor mode.  If called interactively, toggle the `Inf-Ruby
minor mode' mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `inf-ruby-minor-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'inf-ruby "inf-ruby" "\
Run an inferior Ruby process in a buffer.
With prefix argument, prompts for which Ruby implementation
(from the list `inf-ruby-implementations') to use.

If there is a Ruby process running in an existing buffer, switch
to that buffer. Otherwise create a new buffer.

(fn &optional IMPL)" t)
(autoload 'run-ruby "inf-ruby" "\
Run an inferior Ruby process, input and output in a buffer.

If there is a process already running in a corresponding buffer,
switch to that buffer. Otherwise create a new buffer.

The consecutive buffer names will be:
`*NAME*', `*NAME*<2>', `*NAME*<3>' and so on.

COMMAND defaults to the default entry in
`inf-ruby-implementations'. NAME defaults to \"ruby\".

Runs the hooks `comint-mode-hook' and `inf-ruby-mode-hook'.

Type \\[describe-mode] in the process buffer for the list of commands.

(fn &optional COMMAND NAME)" t)
(autoload 'inf-ruby-switch-setup "inf-ruby" "\
Modify `rspec-compilation-mode' and `ruby-compilation-mode'
keymaps to bind `inf-ruby-switch-from-compilation' to `ะก-x C-q'.")
(autoload 'inf-ruby-console-auto "inf-ruby" "\
Run the Ruby console command appropriate for the project.
The command and the directory to run it from are detected
automatically from `inf-ruby-console-patterns-alist' which
contains the configuration for the known project types." t)
(autoload 'inf-ruby-console-zeus "inf-ruby" "\
Run Rails console in DIR using Zeus.

(fn DIR)" t)
(autoload 'inf-ruby-console-rails "inf-ruby" "\
Run Rails console in DIR.

(fn DIR)" t)
(autoload 'inf-ruby-console-gem "inf-ruby" "\
Run IRB console for the gem in DIR.
The main module should be loaded automatically.  If DIR contains a
Gemfile, it should use the `gemspec' instruction.

(fn DIR)" t)
(autoload 'inf-ruby-auto-enter "inf-ruby" "\
Switch to `inf-ruby-mode' if the breakpoint pattern matches the current line.
Return the end position of the breakpoint prompt.")
(autoload 'inf-ruby-auto-enter-and-focus "inf-ruby" "\
Switch to `inf-ruby-mode' on a breakpoint, select that window and set point.")
(autoload 'inf-ruby-auto-exit "inf-ruby" "\
Return to the previous compilation mode if INPUT is a debugger exit command.

(fn INPUT)")
(autoload 'inf-ruby-console-script "inf-ruby" "\
Run custom bin/console, console or console.rb in DIR.

(fn DIR)" t)
(autoload 'inf-ruby-console-default "inf-ruby" "\
Run Pry, or bundle console, in DIR.

(fn DIR)" t)
(autoload 'inf-ruby-file-contents-match "inf-ruby" "\


(fn FILE REGEXP &optional MATCH-GROUP)")
 (dolist (mode ruby-source-modes) (add-hook (intern (format "%s-hook" mode)) 'inf-ruby-minor-mode))
(register-definition-prefixes "inf-ruby" '("inf-ruby-" "ruby-" "run-ruby-"))

;;; End of scraped data

(provide 'inf-ruby-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; inf-ruby-autoloads.el ends here

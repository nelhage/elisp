;;; obsidian-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from obsidian.el

(autoload 'obsidian-change-vault "obsidian" "\
Set vault directory to PATH and repopulate vault cache.
When run interactively asks user to specify the path.

(fn &optional PATH)" t)
(autoload 'obsidian-update "obsidian" "\
Check the cache against files on disk and update cache as necessary.

If a file has been modified more recently than `obsidian--updated-time',
we assume it may have been modified outside of obsidian.el so we call
`obsidian-add-file'.  Note that files modified by obsidian.el would also
show more recent modified times if they called `obsidian--update-on-save'
that was triggered by the `after-save-hook'.  We have no way to distinguish
this from a file modified outside of obsidian.el, so we'll re-process
them all just in case." t)
(autoload 'obsidian-insert-wikilink "obsidian" "\
Insert a link to file in wikilink format.

If ARG is set, the value of `obsidian-links-use-vault-path' will be toggled for
the current link insertion.

(fn &optional ARG)" t)
(autoload 'obsidian-insert-link "obsidian" "\
Insert a link to file in markdown format.

If ARG is set, the value of `obsidian-links-use-vault-path' will be toggled for
this link insertion.  If text is highlighted, the highlighted text will be
replaced by the link.

(fn &optional ARG)" t)
(autoload 'obsidian-remove-link "obsidian" "\
Remove link and replace with link text." t)
(autoload 'obsidian-insert-tag "obsidian" "\
Insert a tag from the existing tags." t)
(autoload 'obsidian-capture "obsidian" "\
Create new obsidian note.

In the `obsidian-inbox-directory' if set otherwise in `obsidian-directory' root." t)
(autoload 'obsidian-daily-note "obsidian" "\
Create new obsidian daily note.

Note is created in the `obsidian-daily-notes-directory' if set, or in
`obsidian-inbox-directory' if set, or finally n `obsidian-directory' root." t)
(autoload 'obsidian-jump "obsidian" "\
Jump to Obsidian note." t)
(autoload 'obsidian-move-file "obsidian" "\
Move current note to another directory." t)
(autoload 'obsidian-jump-back "obsidian" "\
Jump backward to previous location." t)
(autoload 'obsidian-follow-link-at-point "obsidian" "\
Follow thing at point if possible, such as a reference link or wiki link.
Opens inline and reference links in a browser.  Opens wiki links
to other files in the current window, or another window if ARG is non-nil.
See `markdown-follow-link-at-point' and `markdown-follow-wiki-link-at-point'.

(fn &optional ARG)" t)
(autoload 'obsidian-backlink-jump "obsidian" "\
Select a backlink to this FILE and follow it.

(fn &optional FILE)" t)
(autoload 'obsidian-backlinks-window "obsidian" "\
Visit backlinks buffer if not currently active or return to previous." '(obsidian-mode))
(autoload 'obsidian-search "obsidian" "\
Search Obsidian vault for input." t)
(autoload 'obsidian-find-tag "obsidian" "\
Find all notes with a tag." t)
(put 'global-obsidian-mode 'globalized-minor-mode t)
(defvar global-obsidian-mode nil "\
Non-nil if Global Obsidian mode is enabled.
See the `global-obsidian-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-obsidian-mode'.")
(custom-autoload 'global-obsidian-mode "obsidian" nil)
(autoload 'global-obsidian-mode "obsidian" "\
Toggle Obsidian mode in all buffers.
With prefix ARG, enable Global Obsidian mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Obsidian mode is enabled in all buffers where
`obsidian-enable-minor-mode' would do it.

See `obsidian-mode' for more information on Obsidian mode.

(fn &optional ARG)" t)
(defvar obsidian-backlinks-mode nil "\
Non-nil if Obsidian-Backlinks mode is enabled.
See the `obsidian-backlinks-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `obsidian-backlinks-mode'.")
(custom-autoload 'obsidian-backlinks-mode "obsidian" nil)
(autoload 'obsidian-backlinks-mode "obsidian" "\
When active, open a buffer showing the backlinks for the current file.

Opening an Obsidian file will automatically create a separate
temporary buffer showing the backlinks to that file.

The backlinks themselves are links, linking back to the location pointed
in the linked file.

This is a global minor mode.  If called interactively, toggle the
`Obsidian-Backlinks mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='obsidian-backlinks-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "obsidian" '("obsidian-"))

;;; End of scraped data

(provide 'obsidian-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; obsidian-autoloads.el ends here

;;; ein-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from ein-cell.el

(register-definition-prefixes "ein-cell" '("ein:"))


;;; Generated autoloads from ein-classes.el

(register-definition-prefixes "ein-classes" '("ein:"))


;;; Generated autoloads from ein-contents-api.el

(register-definition-prefixes "ein-contents-api" '("*ein:content-hierarchy*" "ein:"))


;;; Generated autoloads from ein-core.el

(register-definition-prefixes "ein-core" '("*ein:" "ein:"))


;;; Generated autoloads from ein-dev.el

(autoload 'ein:dev-start-debug "ein-dev" "\
Start logging a bunch of stuff." t)
(autoload 'ein:dev-stop-debug "ein-dev" "\
Inverse of `ein:dev-start-debug'.
Impossible to maintain because it needs to match start." t)
(autoload 'ein:dev-bug-report-template "ein-dev" "\
Open a buffer with bug report template." t)
(register-definition-prefixes "ein-dev" '("ein:dev-"))


;;; Generated autoloads from ein-events.el

(register-definition-prefixes "ein-events" '("ein:events-"))


;;; Generated autoloads from ein-file.el

(register-definition-prefixes "ein-file" '("*ein:file-buffername-template*" "ein:"))


;;; Generated autoloads from ein-gat.el

(autoload 'ein:gat-create "ein-gat" "\


(fn &optional REFRESH)" t)
(autoload 'ein:gat-run-local-batch "ein-gat" "\


(fn &optional REFRESH)" t)
(autoload 'ein:gat-run-local "ein-gat" "\


(fn &optional REFRESH)" t)
(autoload 'ein:gat-run-remote-batch "ein-gat" "\


(fn &optional REFRESH)" t)
(autoload 'ein:gat-run-remote "ein-gat" "\


(fn &optional REFRESH)" t)
(register-definition-prefixes "ein-gat" '("ein:gat-"))


;;; Generated autoloads from ein-ipdb.el

(register-definition-prefixes "ein-ipdb" '("*ein:ipdb-sessions*" "ein:ipdb-"))


;;; Generated autoloads from ein-ipynb-mode.el

(autoload 'ein:ipynb-mode "ein-ipynb-mode" "\
A simple mode for ipynb file.

\\{ein:ipynb-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.ipynb\\'" . ein:ipynb-mode))


;;; Generated autoloads from ein-jupyter.el

(defvar ein:jupyter-server-use-subcommand "notebook" "\
For JupyterLab 3.0+ change the subcommand to \"server\".
Users of \"jupyter-notebook\" (as opposed to \"jupyter notebook\") select Omit.")
(custom-autoload 'ein:jupyter-server-use-subcommand "ein-jupyter" t)
(autoload 'ein:jupyter-crib-token "ein-jupyter" "\
Shell out to jupyter for its credentials knowledge.  Return list
of (PASSWORD TOKEN).

(fn URL-OR-PORT)")
(autoload 'ein:jupyter-crib-running-servers "ein-jupyter" "\
Shell out to jupyter for running servers.")
(autoload 'ein:jupyter-server-start "ein-jupyter" "\
Start SERVER-COMMAND with `--notebook-dir' NOTEBOOK-DIRECTORY.

Login after connection established unless NO-LOGIN-P is set.
LOGIN-CALLBACK takes two arguments, the buffer created by
`ein:notebooklist-open--finish', and the url-or-port argument
of `ein:notebooklist-open*'.

With \\[universal-argument] prefix arg, prompt the user for the
server command.

(fn SERVER-COMMAND NOTEBOOK-DIRECTORY &optional NO-LOGIN-P LOGIN-CALLBACK PORT)" t)
(defalias 'ein:run 'ein:jupyter-server-start)
(defalias 'ein:stop 'ein:jupyter-server-stop)
(autoload 'ein:jupyter-server-stop "ein-jupyter" "\


(fn &optional ASK-P URL-OR-PORT)" t)
(register-definition-prefixes "ein-jupyter" '("*ein:jupyter-server-" "ein:"))


;;; Generated autoloads from ein-kernel.el

(defalias 'ein:kernel-url-or-port 'ein:$kernel-url-or-port)
(defalias 'ein:kernel-id 'ein:$kernel-kernel-id)
(register-definition-prefixes "ein-kernel" '("ein:"))


;;; Generated autoloads from ein-kernelinfo.el

(register-definition-prefixes "ein-kernelinfo" '("ein:kernelinfo"))


;;; Generated autoloads from ein-kill-ring.el

(register-definition-prefixes "ein-kill-ring" '("ein:"))


;;; Generated autoloads from ein-log.el

(register-definition-prefixes "ein-log" '("ein:"))


;;; Generated autoloads from ein-markdown-mode.el

(autoload 'ein:markdown-mode "ein-markdown-mode" "\
Major mode for editing ein:markdown files.

(fn)" t)
(register-definition-prefixes "ein-markdown-mode" '("defun-markdown-" "ein:markdown"))


;;; Generated autoloads from ein-node.el

(register-definition-prefixes "ein-node" '("ein:node-"))


;;; Generated autoloads from ein-notebook.el

(defalias 'ein:notebook-name 'ein:$notebook-notebook-name)
(autoload 'ein:notebook-jump-to-opened-notebook "ein-notebook" "\
List all opened notebook buffers and switch to one that the user selects.

(fn NOTEBOOK)" t)
(autoload 'ein:notebook-open "ein-notebook" "\
Returns notebook at URL-OR-PORT/PATH.

Note that notebook sends for its contents and won't have them right away.

After the notebook is opened, CALLBACK is called as::

  (funcall CALLBACK notebook created)

where `created' indicates a new notebook or an existing one.

(fn URL-OR-PORT PATH &optional KERNELSPEC CALLBACK ERRBACK NO-POP)" t)
(register-definition-prefixes "ein-notebook" '("*ein:notebook--pending-query*" "ein:"))


;;; Generated autoloads from ein-notebooklist.el

(autoload 'ein:notebooklist-reload "ein-notebooklist" "\
Reload current Notebook list.

(fn &optional NBLIST RESYNC CALLBACK)" t)
(autoload 'ein:notebooklist-new-notebook "ein-notebooklist" "\


(fn URL-OR-PORT KERNELSPEC &optional CALLBACK NO-POP RETRY EXPLICIT-PATH)" t)
(autoload 'ein:notebooklist-new-notebook-with-name "ein-notebooklist" "\
Upon notebook-open, rename the notebook, then funcall CALLBACK.

(fn URL-OR-PORT KERNELSPEC NAME &optional CALLBACK NO-POP)" t)
(autoload 'ein:notebooklist-list-paths "ein-notebooklist" "\
Return all files of CONTENT-TYPE for all sessions

(fn &optional CONTENT-TYPE)")
(autoload 'ein:notebooklist-load "ein-notebooklist" "\
Load notebook list but do not pop-up the notebook list buffer.

For example, if you want to load notebook list when Emacs starts,
add this in the Emacs initialization file:

  (add-to-hook \\='after-init-hook \\='ein:notebooklist-load)

or even this (if you want fast Emacs start-up):

  ;; load notebook list if Emacs is idle for 3 sec after start-up
  (run-with-idle-timer 3 nil #\\='ein:notebooklist-load)

(fn &optional URL-OR-PORT)")
(autoload 'ein:notebooklist-open "ein-notebooklist" "\
This is now an alias for `ein:notebooklist-login'.

(fn URL-OR-PORT CALLBACK)" t)
(defalias 'ein:login 'ein:notebooklist-login)
(autoload 'ein:notebooklist-login "ein-notebooklist" "\
Deal with security before main entry of ein:notebooklist-open*.
CALLBACK takes two arguments, the buffer created by
ein:notebooklist-open--success and the url-or-port argument of
ein:notebooklist-open*.

(fn URL-OR-PORT CALLBACK &optional COOKIE-NAME COOKIE-CONTENT TOKEN)" t)
(register-definition-prefixes "ein-notebooklist" '("ein:" "generate-breadcrumbs" "render-"))


;;; Generated autoloads from ein-notification.el

(register-definition-prefixes "ein-notification" '("ein:"))


;;; Generated autoloads from ein-output-area.el

(register-definition-prefixes "ein-output-area" '("ein:"))


;;; Generated autoloads from ein-pager.el

(register-definition-prefixes "ein-pager" '("ein:pager-"))


;;; Generated autoloads from ein-process.el

(register-definition-prefixes "ein-process" '("ein:process-"))


;;; Generated autoloads from ein-python-send.el

(register-definition-prefixes "ein-python-send" '("ein:python-send-"))


;;; Generated autoloads from ein-pytools.el

(register-definition-prefixes "ein-pytools" '("ein:pytools-jump-"))


;;; Generated autoloads from ein-query.el

(register-definition-prefixes "ein-query" '("ein:"))


;;; Generated autoloads from ein-scratchsheet.el

(register-definition-prefixes "ein-scratchsheet" '("ein:scratchsheet"))


;;; Generated autoloads from ein-shared-output.el

(autoload 'ein:shared-output-pop-to-buffer "ein-shared-output" "\
Open shared output buffer." t)
(autoload 'ein:shared-output-show-code-cell-at-point "ein-shared-output" "\
Show code cell at point in shared-output buffer.
It is useful when the output of the cell at point is truncated.
See also `ein:cell-max-num-outputs'." t)
(autoload 'ein:shared-output-eval-string "ein-shared-output" "\
Entry to `ein:cell-execute-internal' from the shared output cell.

(fn KERNEL CODE &rest ARGS)")
(register-definition-prefixes "ein-shared-output" '("*ein:shared-output*" "ein:"))


;;; Generated autoloads from ein-traceback.el

(autoload 'ein:tb-show "ein-traceback" "\
Show full traceback in traceback viewer." t)
(register-definition-prefixes "ein-traceback" '("ein:t"))


;;; Generated autoloads from ein-utils.el

(register-definition-prefixes "ein-utils" '("ein:"))


;;; Generated autoloads from ein-websocket.el

(register-definition-prefixes "ein-websocket" '("ein:"))


;;; Generated autoloads from ein-worksheet.el

(register-definition-prefixes "ein-worksheet" '("ein:" "hof-add"))


;;; Generated autoloads from ob-ein.el

(when (featurep 'org) (let* ((orig (get 'org-babel-load-languages 'custom-type)) (orig-cdr (cdr orig)) (choices (plist-get orig-cdr :key-type))) (push '(const :tag "Ein" ein) (nthcdr 1 choices)) (put 'org-babel-load-languages 'custom-type (cons (car orig) (plist-put orig-cdr :key-type choices)))))
(register-definition-prefixes "ob-ein" '("*ob-ein-sentinel*" "ob-ein-"))


;;; Generated autoloads from poly-ein.el

 (autoload 'poly-ein-mode "poly-ein")
(register-definition-prefixes "poly-ein" '("pm-" "poly-ein-"))

;;; End of scraped data

(provide 'ein-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; ein-autoloads.el ends here

This is mistty.info, produced by makeinfo version 6.8 from mistty.texi.

     MisTTY 1.5.1snapshot

     Stephane Zermatten

     Copyright © 2023-2025, Stephane Zermatten

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* MisTTY: (mistty.info). Shell/comint alternative with a fully-functional
                        terminal
END-INFO-DIR-ENTRY


   Generated by Sphinx.


File: mistty.info,  Node: Top,  Next: Comparison with other packages,  Up: (dir)

MisTTY
******

     MisTTY 1.5.1snapshot

     Stephane Zermatten

     Copyright © 2023-2025, Stephane Zermatten

‘MisTTY’ is a major mode for ‘Emacs’ 29.1 and up that runs a shell
inside of a buffer, similarly to comint mode.  It is built on top of
‘term.el’.  Check out its project page at
‘https://github.com/szermatt/mistty’.

‘M-x mistty’ creates a buffer with an interactive shell.  (*note
Launching: 1.)

MisTTY feels very much like comint mode: you can move around freely and
run any Emacs command you want - until you press TAB and end up with the
native completion or notice the shell autosuggestions.  With MisTTY you
have access to both Emacs and the shell commands and editing tools.

Additionally, commands that take over the entire screen (*note
Fullscreen Mode: 2.) such as ‘less’ or ‘vi’ also work, temporarily
taking over the window, while scrollback remains available in another
buffer.

MisTTY is known to work on Linux and MacOS. It also supports non-shell
command-line programs, such as ‘python’.

The latest version of this documentation is available at
‘https://mistty.readthedocs.io/en/latest/’.  Once MisTTY is installed,
this documentation can be accessed from inside Emacs using ‘M-x info g
mistty’

     Note: If you encounter issues, please take the time to file a bug.
     (*note Reporting issues: 3.)

* Menu:

* Comparison with other packages::
* Contents::
* Index::


File: mistty.info,  Node: Comparison with other packages,  Next: Contents,  Prev: Top,  Up: Top

1 Comparison with other packages
********************************

MisTTY isn’t a terminal emulator, but rather a frontend to an existing
terminal emulator, the built-in ‘term.el’.  Its goal is to make it more
convenient to use while inside of Emacs and better integrate with Emacs
itself.  In theory, other terminal emulators than ‘term.el’ might be
used as engine for MisTTY, such as vterm(1) and eat(2).

MisTTY has some similarities with coterm(3); it offers the same switch
between full-screen and line mode.

‘Coterm’, ‘term.el’ and ‘eat’ all have a line mode, just like ‘comint’
does, which allows you to edit a command line as a whole before sending
it to the shell.  While in line mode, rendering is done by Emacs and
editing commands are Emacs commands.  In constrast, with MisTTY, all
rendering is done by the shell through the terminal.  This is why native
shell completion and autosuggestion is available with MisTTY and not in
line modes and why you can freely mix shell commands with Emacs commands
while editing the command line.

‘term.el’ and ‘eat’ also have a char mode, where rendering and command
execution is handled by the shell, and editing with Emacs isn’t
available.  The difference with MisTTY is then that MisTTY makes Emacs
editing commands available when possible.

‘eat’ also has a semi-char mode, which is the closest there is to
MisTTY. In that mode, Emacs movements commands are available.  However,
Emacs commands that modify the buffer, aren’t available to edit the
command line.  In contrast, MisTTY allows Emacs to navigate to and edit
the whole buffer, then replays changes made to the command-line.

   ---------- Footnotes ----------

   (1) https://github.com/akermu/emacs-libvterm

   (2) https://codeberg.org/akib/emacs-eat

   (3) https://github.com/emacsmirror/coterm


File: mistty.info,  Node: Contents,  Next: Index,  Prev: Comparison with other packages,  Up: Top

2 Contents
**********

* Menu:

* Usage::
* Shells::
* Extending MisTTY::
* FAQ::
* Contributing::


File: mistty.info,  Node: Usage,  Next: Shells,  Up: Contents

2.1 Usage
=========

* Menu:

* Installation::
* Launching::
* Terminal vs. Scrollback: Terminal vs Scrollback.
* Navigating the scrollback zone::
* Fullscreen Mode::
* Command History::
* Backward Search::
* Completion-at-point::
* Template Expansion::
* Directory Tracking::
* Remote Shells with TRAMP::
* Directory tracking and TRAMP::
* Keybindings used by MisTTY::
* Supported OSC Control Sequences::


File: mistty.info,  Node: Installation,  Next: Launching,  Up: Usage

2.1.1 Installation
------------------

To use MisTTY, first install its package,

        - from MELPA or MELPA Stable(1), using ‘M-x package-install
          mistty’

        - from source using ‘M-x package-vc-install
          https://github.com/szermatt/mistty’

And then launch it with ‘M-x mistty’, as described in *note Launching:
1.

You’ll likely want to eventually bind that to some shortcut:

     (use-package mistty
       :bind (("C-c s" . mistty)))

and, unless you’re using ‘Bash’, configure directory tracking for your
shell (*note Directory Tracking: b.), but read on for more details.

   ---------- Footnotes ----------

   (1) https://melpa.org/#/getting-started


File: mistty.info,  Node: Launching,  Next: Terminal vs Scrollback,  Prev: Installation,  Up: Usage

2.1.2 Launching
---------------

To create a new interactive shell buffer in MisTTY mode, call ‘M-x
mistty’, which either creates a new shell or goes to an existing MisTTY
buffer, or ‘M-x mistty-create’, which creates a new MisTTY buffer.

Here’s a quick list of the commands defined by the MisTTY package, their
behavior and arguments:

mistty-create : command

     This command launches a new interactive shell in a MisTTY buffer in
     the current buffer’s ‘default-directory’.

     The shell that is launched is the one that’s configured with ‘M-x
     configure-option mistty-shell-command’.  If ‘mistty-shell-command’
     is not set, MisTTY falls back to ‘explicit-shell-file-name’,
     ‘shell-file-name’, then the environment variables ‘ESHELL’ and
     ‘SHELL’.

     With a prefix argument, this command asks for a directory for the
     new shell, instead of using the current buffer’s current directory.
     This is particularly useful if you want to run shell on a remote
     host.  (*note Remote Shells with TRAMP: d.)

     By default, new buffers are called “*mistty*”, or, if you use TRAMP
     “*mistty@hostname*”.  You can configure this with ‘M-x
     customize-option mistty-buffer-name’.

mistty : command

     This command creates a new MisTTY buffer the first time it is
     called.  Afterwards, it’ll try to guess what’s most appropriate,
     displaying an existing MisTTY buffer or creating a new one.

     With a prefix argument, this command always creates a new buffer.

mistty-other-window : command

     This command does the same as ‘mistty’ but opens the buffer in
     another window.

mistty-create-other-window: command

     This command does the same as ‘mistty-create’, but opens the buffer
     in another window.

If you need more control on how MisTTY windows are handled than what’s
provided by the ‘-other-window’ variants, you can configure it using
‘M-x customize-option display-comint-buffer-action’ or ‘M-x
customize-option display-buffer-alist’.  In the latter case, note that
MisTTY buffers belong to the ‘comint’ category, just like shell buffers.

See the section “Window Choice” of the Emacs manual for details.

mistty-in-project: command

     This command creates a new MisTTY buffer in the root directory of
     the current project the first time it is called.  Afterwards, it’ll
     try to guess what’s most appropriate, displaying an existing MisTTY
     buffer or creating a new one.

     With a prefix argument, this command always creates a new buffer.

     Note that if you want ‘M-x project-kill-buffers’ to kill such
     buffers, you’ll want to execute ‘mistty-project-init-kill-buffer’
     somewhere in your configuration or tell ‘M-x configure-option
     project-kill-buffer-conditions’ about MisTTY.

mistty-ssh : command

     This command creates a new MisTTY buffer connected to another host
     using SSH. This is just a shortcut that uses TRAMP to connect to a
     remote host.  (*note Remote Shells with TRAMP: d.)

mistty-docker: command

     This command creates a new MisTTY buffer connected to a docker
     instance.  This requires the docker command-line tool to be
     installed.  This is just a shortcut that uses TRAMP to connect to a
     remote host.  (*note Remote Shells with TRAMP: d.)


File: mistty.info,  Node: Terminal vs Scrollback,  Next: Navigating the scrollback zone,  Prev: Launching,  Up: Usage

2.1.3 Terminal vs. Scrollback
-----------------------------

MisTTY buffers are divided into two distinct zones, exhibiting different
behaviors:

The ‘scrollback zone’, is where you can see commands that have been
executed and their output.

The ‘terminal zone’, marked by a purple line on the left of the window,
is where you can type command and interact with the terminal.  In this
zone, ‘TAB’ triggers the shell completion, if available.  With some
shells, you’ll see autosuggestions as you type.

The scrollback zone operates like a standard Emacs buffer, allowing you
to modify it freely.

The terminal zone, on the other hand, imposes certain limitations.
While a shell is attached, you can edit the command you are about to
execute, but you can’t modify the prompt itself.  Any changes made to
the prompt will be reverted by the shell.

The terminal zone is where the magic happens: this is where you can use
a mix of Emacs and shell key bindings to edit the command line.  The
trickiest part is choosing which key bindings you want Emacs to handle
and which key bindings you want the shell to handle.

By default, Emacs intercepts most key bindings, but a few are sent
directly to the terminal:

   - ‘RET’: Executes the command in the shell.

   - ‘TAB’: Initiates command completion in the shell.

   - ‘C-a’: Moves the cursor to the beginning of the line.

   - ‘C-e’: Moves the cursor to the end of the line.

   - ‘C-d’: Deletes the next character or exits the program.

   - ‘M-p’: Navigates upwards in the command history (equivalent to
     ‘C-p’ in the terminal).

   - ‘M-n’: Navigates downwards in the command history (equivalent to
     ‘C-n’ in the terminal).

   - ‘M-r’: Invokes reverse command history search (equivalent to ‘C-r’
     in the terminal).  See *note Backward Search: 10.

   - ‘M-.’: Inserts the last argument from command history.

Additionally, ‘C-c C-c’ sends the TERM signal to the terminal.

The program connected to the terminal determines the actual effects of
these shortcuts.  While most shells and command-line editing tools
support these shortcuts by default, behavior may vary.

     Warning: MisTTY will not function if your shell is configured to
     use ‘VI mode’ by default.  Please ‘disable VI mode’ before
     utilizing MisTTY. For instructions on disabling VI mode
     specifically for MisTTY buffers, while preserving it otherwise,
     consult see *note Shells: 11.  VI mode must be disabled even if you
     plan to use VI commands through Evil.

     More generally, MisTTY relies on a set of common keybindings and
     behaviors to communicate with the terminal applications and will
     not behave properly if the application doesn’t understand these or
     interpret them in an unusual way.  For a list of these keybindings,
     see *note Keybindings used by MisTTY: 12.

To get the most out of MisTTY, it’s worth it to take the time to
configure it to send to the terminal the shell key bindings that you
actually use and keep everything else behaving as usual for your Emacs
configuration.

To bind keys only in the terminal zone, bind them to
‘mistty-prompt-map’.  To bind keys in both zones, bind them to
‘mistty-mode-map’.  Examples are provided below.

The following commands are useful for sending key sequences to the
current shell or terminal program:

‘mistty-send-key’ : command

     This command, when called interactively, forwards the key from
     which it was invoked.  It is designed to be bound to the shell key
     bindings you wish to function in the terminal zone,
     ‘mistty-prompt-map’.

     For example, to search in the shell command history, typically
     bound to ‘C-r’, MisTTY binds it to ‘M-r’, similar to comint.
     However, if you’d prefer to use the original binding, you can do
     the following:

          (keymap-set mistty-prompt-map "C-r" #'mistty-send-key)

     To have the key available in both the scrollback and terminal
     zones, bind it to ‘mistty-mode-map’ instead.

     You can also send arbitrary keys to ‘mistty-send-key’.  For
     example:

          (defun my-mistty-M-s (n)
            (interactive "p")
            (mistty-send-key n (kbd "M-s")))
          (keymap-set mistty-prompt-map "C-c a" #'my-mistty-M-s)

‘mistty-send-last-key’ : command

     This command forwards the last key combination from the sequence it
     was invoked from to the terminal.  For instance, ‘C-c C-c’ is bound
     to ‘mistty-send-last-key’, such that the terminal ultimately
     receives just ‘C-c’.

For quick testing or for shell shortcuts you use infrequently, use the
‘C-q’ prefix to bypass Emacs key bindings and send keys directly to the
terminal.  For example, pressing ‘C-q <right>’ sends a right-arrow key
press to the terminal instead of moving the cursor.

If further control is needed, try out:

‘mistty-send-key-sequence’ : command

     This command sends all keys you press to the terminal until you
     press ‘C-g’.

     By default, it is bound to ‘C-c C-q’.

‘mistty-newline’ : command

     This command sends a single newline as bracketed paste, meaning
     that the newline should be inserted as-is and not execute the
     current command.

     By default, it is bound to ‘S-<return>’.


File: mistty.info,  Node: Navigating the scrollback zone,  Next: Fullscreen Mode,  Prev: Terminal vs Scrollback,  Up: Usage

2.1.4 Navigating the scrollback zone
------------------------------------

‘C-e C-e’ moves the point back inside the prompt.  This is handled by
the interactive function ‘mistty-end-of-line-or-goto-cursor’

‘M-x mistty-goto-cursor’ also moves the point back inside the prompt.
You can bind it to a custom shortcut if you don’t like overloading C-e.

‘C-c C-p’ or ‘M-x mistty-goto-previous-output’ goes to the beginning of
the previous command output.  This is useful to if the buffer has
scrolled too far and you want to see it from the beginning.

‘C-c C-n’ or ‘M-x mistty-goto-next-output’ does the reverse, that is, it
goes to the next command output.

‘C-c C-o’ or ‘M-x mistty-select-output’ selects the command output at or
before point.  With an argument, selects the Nth previous command
output.

‘C-c C-r’ or ‘M-x mistty-create-buffer-with-output’ creates a new buffer
containing the command output at or before point.  With an argument,
creates a buffer containing the Nth previous command output.

‘M-x mistty-goto-previous-input’ goes to the beginning of the previous
command input, that is, the previous prompt.  While this is a way of
going back the command you’ve previously input, it’s best to use the
shell native command history, as discussed in *note Command History: 15.

‘M-x mistty-goto-next-input’ goes to the next command input.

‘C-c C-l’ or ‘M-x mistty-clear’ deletes the content of the buffer until
the current prompt.  With a numeric argument N, it deletes the content
of the buffer until the Nth previous prompt.

Alternatively, if you prefer clearing the scrollback zone from the
command line instead of using an Emacs command, you can also do ‘M-x
customize-option mistty-allow-clearing-scrollback’ to let the ‘reset’
and ‘clear’ commands clear the whole buffer instead of just the terminal
zone.

MisTTY defines an index for imenu, so that ‘M-x imenu’ lets you select
commands and outputs to go to.  This also allows packages based on imenu
to work, such as breadcrumbs(1) that can display the current command in
a header, if enabled in a MisTTY buffer.

     Note: If imenu shows strange commands, consider adding an OSC133 B
     code (”033]133;B007”) at the end of your prompt so MisTTY knows
     when the prompt ends and where user input begins.  See *note
     Supported OSC Control Sequences: 16.

Additionally, MisTTY defines prompts as defuns, so any function that
applies on defun applies on prompts in a MisTTY buffer, so, for example:

        - ‘C-x n d’ or ‘M-x narrow-to-defun’, narrows the buffer to the
          current prompt and its output

        - ‘C-M a’ or ‘M-x beginning-to-defun’, moves point to the
          beginning of the current prompt

        - ‘C-M e’ or ‘M-x end-to-defun’, moves point to the end of the
          current prompt’s output

        - ‘C-M h’ or ‘M-x mark-defun’, marks the current prompt and its
          output

   ---------- Footnotes ----------

   (1) https://github.com/joaotavora/breadcrumb


File: mistty.info,  Node: Fullscreen Mode,  Next: Command History,  Prev: Navigating the scrollback zone,  Up: Usage

2.1.5 Fullscreen Mode
---------------------

MisTTY detects when a program, such as ‘less’ or ‘vi’, requests
full-screen mode.  In response, it splits the MisTTY buffers in two:

   - The ‘terminal buffer’, which displays the program’s output and
     allows you to interact with it.  It operates in term-mode.

   - The ‘Scrollback Buffer’, which contains the previous command lines
     along with their outputs.

To switch between these buffers, press ‘C-c C-j’ or execute ‘M-x
mistty-toggle-buffers’

When the full-screen program exits, the two buffers are merged back
together.  Please note that the output from the full-screen application
is not available in the scrollback region.


File: mistty.info,  Node: Command History,  Next: Backward Search,  Prev: Fullscreen Mode,  Up: Usage

2.1.6 Command History
---------------------

MisTTY doesn’t track command history.  It relies instead on being able
to access the history of the different interactive command-line tools.

The command history available in most shells and command-line editing
tools is available in MisTTY using the following shortcuts:

   - ‘M-p’ moves up command history

   - ‘M-n’ moves down command history

   - ‘M-r’ triggers a backward search in command history (*note Backward
     Search: 10.)

   - ‘M-.’ insert the last argument from command history

To get the same key bindings you’d get in a normal terminal, you can
bind ‘C-p’, ‘C-n’, or ‘C-r’ to ‘mistty-send-key’ in the terminal zone of
the MisTTY buffer.  For example:

     (keymap-set mistty-prompt-map "C-p" #'mistty-send-key)
     (keymap-set mistty-prompt-map "C-n" #'mistty-send-key)
     (keymap-set mistty-prompt-map "C-r" #'mistty-send-key)


File: mistty.info,  Node: Backward Search,  Next: Completion-at-point,  Prev: Command History,  Up: Usage

2.1.7 Backward Search
---------------------

Within various shells, pressing ‘C-r’ or ‘M-r’ activates a special
backward search mode, where editing options are limited.  MisTTY
identifies this mode using the regular expressions set in ‘M-x
customize-option mistty-forbid-edit-regexps’.

When this mode is active:

   - You can append or delete text but cannot modify it.  Though yanking
     text and word deletion are still possible, most Emacs editing won’t
     work.

   - The modeline displays “FE:run” to indicate Forbid Edit mode.

   - Arrow keys are sent directly to the terminal, which is beneficial
     for shells like Fish that allow selection from multiple choices.
     To customize this functionality, adjust key bindings in
     ‘mistty-forbid-edit-map’, which extends ‘mistty-prompt-map’ in this
     mode.

   - Pressing ‘C-g’ sends a signal to the terminal and typically exits
     backward search mode without making a selection.


File: mistty.info,  Node: Completion-at-point,  Next: Template Expansion,  Prev: Backward Search,  Up: Usage

2.1.8 Completion-at-point
-------------------------

When in a MisTTY buffer, it’s best to rely on the completion or
autosuggestions provided by the shell or other command-line tool
currently running, as they’re more up-to-date and context-sensitive than
what Emacs can provide.

However, some form of Emacs-based completion can still be useful from
inside of a MisTTY buffer, to complete abbreviations, expand templates
or add emojis.

The following completion packages are known to work with MisTTY out of
the box, including auto-completion, if enabled:

   - Emacs builtin ‘complete-in-region’

   - corfu(1)

   - company-mode(2)

Emacs ‘hippie-expand’ also works.  That’s not completion, but it’s
close.

Other packages might work or might be made to work with some efforts.
Auto-completion is usually the main challenge, described in *note
Auto-complete: 1c.  Please file a bug (*note Reporting issues: 3.) if
you encounter issues with other completion packages.

* Menu:

* Autosuggestions::

   ---------- Footnotes ----------

   (1) https://github.com/minad/corfu

   (2) http://company-mode.github.io


File: mistty.info,  Node: Autosuggestions,  Up: Completion-at-point

2.1.8.1 Autosuggestions
.......................

‘completion-at-point’ completes the text ‘around’ the point.  This is
generally convenient, but gets confused by shell autosuggestions,
available in Fish or ZSH.

What if you typed “com” and the shell helpfully suggests “completion”?
The buffer would look like: “com<>pletion”, with <> representing the
point.  ‘completion-at-point’ would then think you typed “completion”
and not suggest anything else.

To avoid that problem MisTTY modifies the functions it finds in
‘completion-at-point-functions’ so that they just won’t see anything
after the point when in the terminal region.  In the example above,
they’d only complete “com”, not “completion”.

That is, ‘completion-at-point’ in the MisTTY terminal region completes
the text ‘before’ the point.

If you don’t like that or don’t use a shell that supports
autosuggestions, you can turn this off with ‘M-x customize-option
mistty-wrap-capf-functions’


File: mistty.info,  Node: Template Expansion,  Next: Directory Tracking,  Prev: Completion-at-point,  Up: Usage

2.1.9 Template Expansion
------------------------

Template expansion and other form of long-running editing command might
be confused by the way MisTTY work in the terminal region.  See *note
Long-running commands: 1f. for details.

The following template expansion packages are known to work with MisTTY
out of the box, if enabled:

   - Emacs built-in ‘tempo’ package

   - tempel(1)

   - yasnippet(2)

Other packages might work or might be made to work with some efforts.
Please file a bug (*note Reporting issues: 3.) if you encounter issues
with other packages.

   ---------- Footnotes ----------

   (1) https://github.com/minad/tempel

   (2) https://github.com/joaotavora/yasnippet


File: mistty.info,  Node: Directory Tracking,  Next: Remote Shells with TRAMP,  Prev: Template Expansion,  Up: Usage

2.1.10 Directory Tracking
-------------------------

If you’re using ‘Bash’ or ‘Fish’ version 4 or later, as a shell, you’ll
discover that Emacs keeps track of the shell’s current directory, so
commands like ‘M-x find-file’ know where to start from.

If you’re using any other shell, you’ll need to configure it to tell
Emacs about its current directory, as described in *note Directory
Tracking for Fish: 21. and in *note Directory Tracking for Zsh: 22.

‘Bash’ out-of-the-box directory tracking also doesn’t work in shells you
start using ‘ssh’ or ‘docker’.  For that to work, the simplest solution
is to start remote shells with TRAMP. (*note Remote Shells with TRAMP:
d.)


File: mistty.info,  Node: Remote Shells with TRAMP,  Next: Directory tracking and TRAMP,  Prev: Directory Tracking,  Up: Usage

2.1.11 Remote Shells with TRAMP
-------------------------------

If the ‘default-directory’ that is current when a new MisTTY buffer is
created contains a TRAMP path whose method supports it, MisTTY runs the
shell with the method, user and host ‘of that path’.

     Tip: ‘C-u M-x mistty-create’ asks for a directory instead of using
     the default one.  This makes it possible to open a remote shell on
     a host that no buffer is visiting.  See *note Launching: 1.

For this to work, MisTTY needs to know the shell executable to use on
that host.  The value of ‘mistty-shell-command’ or
‘explicit-shell-file-name’ is interpreted as a local file within that
host, which might not always work.

To run different shells on different hosts, define different connection
local profiles that set ‘mistty-shell-command’ and bind them to the
TRAMP host, machine or user you want, as shown in the example below.
This is described in details in the ‘Emacs Lisp’ manual, in the section
‘Connection Local Variables’.

Example:

     (connection-local-set-profile-variables
      'profile-usr-local-fish
      '((mistty-shell-command . ("/usr/local/bin/fish" "-i"))))

     (connection-local-set-profiles '(:machine "myhost.example")
      'profile-usr-local-fish)

By default, the name of TRAMP shells include the user and hostname, if
different from the current one.  If you don’t want that, configure it on
‘M-x customize-option mistty-buffer-name’.


File: mistty.info,  Node: Directory tracking and TRAMP,  Next: Keybindings used by MisTTY,  Prev: Remote Shells with TRAMP,  Up: Usage

2.1.12 Directory tracking and TRAMP
-----------------------------------

Directory tracking (*note Directory Tracking: b.) normally just works in
TRAMP shells started described in the previous section.

This isn’t necessarily true of shells started from a MisTTY buffers, by
calling ‘ssh’, ‘docker’ or ‘sudo’, but it is possible to make that work,
as described below.

     Tip: The simplest way to connect a host or docker instance you
     don’t want to configure is to just start it as described in *note
     Remote Shells with TRAMP: d. and use ‘Bash’ as your shell.
     Everything then just work out of the box, at least for Bash 4.4 and
     later.  (*note Directory tracking in Bash: 26.)

If you haven’t already, configure your shell to tell Emacs about
directory changes, even ‘Bash’.  This is described in *note Directory
Tracking for Bash: 26, in *note Directory Tracking for Fish: 21, and in
*note Directory Tracking for Zsh: 22.

Once this is done, the shell sends out file: URLs that include the host
name.  By default, MisTTY will then use that to set the default
directory to remote file paths that include that hostname using the
default TRAMP method.  For example, given the file: URL
‘file:/example.com/var/log’ reported by the shell, MisTTY will set the
directory of its buffer to ‘/-:example.com:/var/log’.

If you always connect to hosts using SSH, this is likely all you need,
if not, you can still make it work as follows:

   - If you’re using some other way of connecting to your host,
     configure it in ‘M-x configure-option tramp-default-method’.  You
     can also configure that on a per-host basis using ‘M-x
     configure-option tramp-default-method-alist’

   - If you’re connecting to hosts in more diverse ways, you can
     configure the TRAMP path MisTTY should generate using ‘M-x
     configure-option mistty-host-to-tramp-path-alist’

   - If you want to configure the TRAMP path on the hosts, you can send
     it from the prompt as Emacs-specific ‘\\032/...\\n’ code containing
     a TRAMP path instead of the standard file: URL recommended in *note
     Directory Tracking for Bash: 26, in *note Directory Tracking for
     Fish: 21, and in *note Directory Tracking for Zsh: 22.  Here’s an
     example of such a code for ‘Bash’ that tells TRAMP to connect to
     the current docker instance:

          if [ "$TERM" = "eterm-color" ]; then
              PS1='\032//docker:$HOSTNAME:/$PWD\n'$PS1
          fi

That said, if you need more than just SSH to connect to other hosts, it
might be overall just easier to start remote shells with TRAMP (*note
Remote Shells with TRAMP: d.) instead of the command line, because
directory tracking just works in that case.

If everything fails, if TRAMP is causing you too much trouble and you
just don’t want MisTTY to generate remote paths at all, unset the option
‘M-x configure-option mistty-allow-tramp-paths’.


File: mistty.info,  Node: Keybindings used by MisTTY,  Next: Supported OSC Control Sequences,  Prev: Directory tracking and TRAMP,  Up: Usage

2.1.13 Keybindings used by MisTTY
---------------------------------

MisTTY relies on applications connected to the terminal to handle
keybindings in a common way, that is:

   - Any printable character: Inserts the character at the cursor
     position.

   - ‘DEL’ (ASCII 127): Deletes the preceding character.

   - ‘C-k’ (ASCII 11): Deletes from the cursor to the end of the line.

   - ‘C-e’ (ASCII 5): Moves the cursor to the end of the line.

   - ‘C-a’ (ASCII 1): Moves the cursor to the beginning of the line.

   - ‘ESC [ 200 ~ ... ESC [ 201 ~’ (bracketed paste): Inserts characters
     verbatim, including tabs and newlines, allowing for multiline
     support.

These keybindings are supported by recent versions of bash, zsh, fish,
Python, and IPython.

When interacting with applications that do not support some or all of
these keybindings, operations may be limited.  You will still be able to
insert characters and, when supported, delete them using backspace or
‘C-d’.  However, you may not have access to Emacs-style operations for
moving the cursor or editing text.

It is important to note that in backward i-search mode within shells,
only character insertion and deletion are supported.  Thus, while most
Emacs commands may not function, you can still use simple Emacs commands
that insert text after the cursor, such as ‘yank’ (with no special
characters), or delete text before the cursor, such as
‘backward-kill-word’.  For more details, see *note Backward Search: 10.


File: mistty.info,  Node: Supported OSC Control Sequences,  Prev: Keybindings used by MisTTY,  Up: Usage

2.1.14 Supported OSC Control Sequences
--------------------------------------

OSC are optional “operating system command” control sequences that
programs can use to communicate with the terminal and Emacs.  MisTTY
supports the following OSC control sequences:

   - ‘OSC 0; <title> ST’ and ‘OSC 2; <title> ST’ changes the window
     title.  This sets the variable ‘ansi-osc-window-title’ in the
     MisTTY buffer, which can then be referred to in
     ‘frame-title-format’ to set the frame title dynamically.

   - ‘OSC 7;file://<hostname>/<path> ST’ reports the shell’s current
     directory to Emacs.  See *note Directory Tracking: b.

   - ‘OSC 8;;<url> ST <text> OSC 8;; ST’ makes text clickable.

     Example:

          printf '\e]8;;http://example.com\e\\This is a link\e]8;;\e\\\n'

   - ‘OSC 10;?  ST’ and ‘OSC 11;?  ST’ query the foreground or
     background color.  The response is an hexadecimal 16 bit RGB value.

     Example: Querying the background color in Bash:

          $ read -t 0.1 -rs -d \\ -p $'\e]11;?\e\\' bg
          $ echo "$bg" | strings
          ]11;rgb:1313/1c1c/2b2b

     Example: A Zsh function that can figure out whether you have a
     light or dark background:

          function bg_brightness {
              local bg
              if read -t 0.1 -rs -d \\ "?$(printf '\e]11;?\e\\')"  bg; then
                  if [[ "$bg" =~ '11;rgb:([0-9a-f]{4})/([0-9a-f]{4})/([0-9a-f]{4})' ]]; then
                      local r g b brightness
                      typeset -i 10 r=16#${match[1]}
                      typeset -i 10 g=16#${match[2]}
                      typeset -i 10 b=16#${match[3]}
                      (( brightness = ( 0.2126 * r + 0.7152 * g + 0.0722 * b ) * ( 256.0 / 0xffff ) ))
                      if [[ $brightness -le 128 ]]; then
                          echo dark
                      else
                          echo light
                      fi
                      return 0
                  fi
              fi
              return 1
          }

   - ‘OSC 133; A-D ; <options> ST’

Escape sequences that help terminals identify shell commands and their
output, originally defined by FinalTerm.  Several terminals support OSC
133, such as wezterm(1), kitty(2) and iTerm(3), so you might have it
enabled already.

Without these commands, MisTTY uses heuristics to detect the beginning
of a prompt or of a command, they should normally not be necessary.
It’s a good idea, however, to configure your shell to send them out.
The iTerm2 website has ready-made scripts(4) to configure most shells to
send out OSC 133 codes.

Starting with version 4.0.0, Fish sends out codes A, C and D
automatically, but you still need to send out B at the end of your
prompt.

‘OSC 133;A ST’ should be sent just before the start of a prompt, usually
from a precmd function.  Sending out this code allows MisTTY to know
that user input is expected.

‘OSC 133;B ST’ should be sent just after having written the prompt, to
signal the start of user input.  It should be sent out at the very end
of the prompt.

Sending out a OSC 133 B code allows MisTTY to mark prompts so that
commands such as ‘beginning-of-line’ or ‘imenu’ are aware of where user
input starts.  This can be done independently of sending out the other
codes.


     PS1=$PS1'\e]133;B\007'

LiteralBlock: OSC 133 B code for bash


     PS1=$PS1$(printf '\e]133;B\007')

LiteralBlock: OSC 133 B code for zsh


     functions -c fish_prompt orig_fish_prompt

     function fish_prompt
       orig_fish_prompt
       printf "\033]133;B\007"
     end

LiteralBlock: OSC 133 B code for fish

‘OSC 133;C ST’ should be sent just before executing the command, usually
from a preexec function.  Sending out this code allows MisTTY to know
where the prompt ends.

‘OSC 133;D ST’ should be sent at the end of the command, or when the
command is cancelled.

     Note: Different terminals may interpret OSS 133 codes differently.
     MisTTY only supports codes A,B,C, and D for marking the user input
     and prompt sections and ignores any extra fields.

To extend the set of OSC codes supported by MisTTY, see *note OSC
Sequences: 2a.

   ---------- Footnotes ----------

   (1) https://wezterm.org/shell-integration.html

   (2) 
https://sw.kovidgoyal.net/kitty/shell-integration/#notes-for-shell-developers

   (3) https://iterm2.com/documentation-shell-integration.html

   (4) 
https://iterm2.com/documentation-shell-integration.html#install-by-hand


File: mistty.info,  Node: Shells,  Next: Extending MisTTY,  Prev: Usage,  Up: Contents

2.2 Shells
==========

* Menu:

* Bash::
* Fish::
* Zsh::
* IPython::


File: mistty.info,  Node: Bash,  Next: Fish,  Up: Shells

2.2.1 Bash
----------

A recent version of Bash is preferable.  Bash 5.1 or later is
recommended.

MisTTY works best with shells that support bracketed paste.  Without
bracketed paste support, MisTTY will still work, but might behaves
unexpectedly when yanking text containing special characters.

Bash 4.5 to 5.0 supports bracketed paste, but it must be turned on in
your ‘.inputrc’, as follows:

     set enable-bracketed-paste on

Bash versions older than 4.5 don’t support bracketed paste.

Additionally, Bash versions older than 4.4 require extra setup to enable
directory tracking, as documented in *note Directory tracking in Bash:
26.

* Menu:

* Multi-line prompts in Bash::
* Directory tracking in Bash::
* VI mode in Bash::
* Fancy prompts in Bash::


File: mistty.info,  Node: Multi-line prompts in Bash,  Next: Directory tracking in Bash,  Up: Bash

2.2.1.1 Multi-line prompts in Bash
..................................

When you press ‘RET’ on an incomplete command, ‘bash’ has the annoying
habit of starting a secondary prompt which doesn’t let you go back to
the previous line with the default keybindings.

To work around that, type ‘S-<return>’ instead of ‘RET’ while on the
terminal zone of a MisTTY buffer.  This sends a newline without running
the command.  You’ll then end up with one multi-line prompt that you can
edit normally.  This requires Bash 5.1 or an earlier version with
bracketed paste mode turned on.

You’ll get the same effect if you yank a multi-line command while in a
prompt or go up the command history to a previous multi-line command.

Please be aware that when editing a multi-line command in Bash, MisTTY
may leave trailing spaces at the end of some lines.  In situations where
these are significant, you will need to remove trailing spaces using
‘C-d’ or ‘DEL’.


File: mistty.info,  Node: Directory tracking in Bash,  Next: VI mode in Bash,  Prev: Multi-line prompts in Bash,  Up: Bash

2.2.1.2 Directory tracking in Bash
..................................

Recent versions of ‘bash’ already send the current directory when they
detects that it’s called from Emacs with ‘TERM=eterm-color’.  This works
fine for local shell as well as remote shells run with TRAMP.

If you ssh into a host from an existing MisTTY buffer, however, ‘bash’
will not send the remote directory.  If you want this use case to work,
extend your prompt to send out an OSC7 sequence to have ‘bash’ send the
current directory and hostname to MisTTY.

To do that, you might add the following to ‘~/.bashrc’:

     if [ "$TERM" = "eterm-color" ]; then
       PS1='\e]7;file://$HOSTNAME$PWD\e\\\\'$PS1
     fi

Such sequence are either ignored or understood by most terminals, so you
don’t absolutely need to check TERM.

Versions of ‘bash’ older than 4.4 only enable directory tracking if the
env variable EMACS is set.  You can have MisTTY set this env variable
when it starts a shell by going to ‘M-x customize-option
mistty-set-EMACS’. ‘mistty-set-EMACS’ also works as a connection-local
variable, to set the EMACS env variable only on some hosts that use an
old version of ‘bash’.

For example:

     (connection-local-set-profile-variables
      'profile-old-bash
      '((mistty-set-EMACS . t)
        (mistty-shell-command . ("/bin/bash" "-i"))))

     (connection-local-set-profiles '(:machine "oldhost.example.com")
      'profile-old-bash)
     (connection-local-set-profiles '(:protocol "docker")
      'profile-old-bash)"


File: mistty.info,  Node: VI mode in Bash,  Next: Fancy prompts in Bash,  Prev: Directory tracking in Bash,  Up: Bash

2.2.1.3 VI mode in Bash
.......................

To communicate with ‘bash’, MisTTY requires the shell to be in its
default editing mode, that is, the emacs mode.  ‘Please make sure you
haven’t put readline or bash in vi mode before trying out MisTTY.’

To turn on vi mode in readline everywhere but MisTTY, you can add
something like the following into ‘~/.inputrc’:

     $if term=eterm
       set editing-mode emacs
     $else
       set editing-mode vi
     $endif

Or, in bash ‘~/.bashrc’:

     if [ "$TERM" != "eterm-color" ]; then
       set -o vi
     fi


File: mistty.info,  Node: Fancy prompts in Bash,  Prev: VI mode in Bash,  Up: Bash

2.2.1.4 Fancy prompts in Bash
.............................

MisTTY is compatible with stylized prompts, such as those produced by
powerline-go(1).  However, given the numerous variations in how these
prompts are created, issues may arise.

If you suspect that your shell prompt may be causing problems, try
configuring your shell to send out *note OSC 133: 29. codes to help
MisTTY correctly identify your prompt.

   ---------- Footnotes ----------

   (1) https://github.com/justjanne/powerline-go


File: mistty.info,  Node: Fish,  Next: Zsh,  Prev: Bash,  Up: Shells

2.2.2 Fish
----------

A recent version of Fish is preferable.  MisTTY relies on bracketed
paste mode, on by default, so it should not be turned off.

* Menu:

* Autosuggestions in Fish::
* Command History in Fish::
* Directory tracking in Fish::
* Multi-line prompts in Fish::
* VI mode in Fish::
* Fancy prompts in Fish::


File: mistty.info,  Node: Autosuggestions in Fish,  Next: Command History in Fish,  Up: Fish

2.2.2.1 Autosuggestions in Fish
...............................

‘fish’ autosuggestions work normally in MisTTY. However, the usual way
of accepting an autosuggestion, pressing the right arrow key, is very
inconvenient as this is bound to an Emacs point movement.

The recommended way of accepting an autosuggestion in MisTTY is to type
‘C-e’.  This works in normal terminals as well.


File: mistty.info,  Node: Command History in Fish,  Next: Directory tracking in Fish,  Prev: Autosuggestions in Fish,  Up: Fish

2.2.2.2 Command History in Fish
...............................

To make full use of ‘fish’ command history, you’ll want to forward some
additional shortcuts to fish:

     (keymap-set mistty-prompt-map "M-<up>" #'mistty-send-key)
     (keymap-set mistty-prompt-map "M-<down>" #'mistty-send-key)
     (keymap-set mistty-prompt-map "M-<left>" #'mistty-send-key)
     (keymap-set mistty-prompt-map "M-<right>" #'mistty-send-key)

This can also be done by calling ‘use-package’ as shown in *note
Installation: a.

When in reverse history search mode, ‘fish’ enters a mode that lets you
select an option using the arrow keys.  To send up/down/left/right
directly to ‘fish’, you can:

   - use ‘M-p’ to go up and ‘M-n’ to go down, or, if you prefer

   - use ‘C-q <up>’ ‘C-q <down>’ ‘C-q <left>’ ‘C-q <right>’, or even

   - ‘C-c C-q’ to temporarily send all send key presses to ‘fish’


File: mistty.info,  Node: Directory tracking in Fish,  Next: Multi-line prompts in Fish,  Prev: Command History in Fish,  Up: Fish

2.2.2.3 Directory tracking in Fish
..................................

Starting with version 4.0.0, Fish sends out an OSC7 sequence by default,
so directory tracking doesn’t require any configuration.

For older versions of fish, extend your prompt to send out an OSC7
sequence to have ‘fish’ send the current directory and hostname to
MisTTY. To do that, you might add the following to
‘~/.local/config/fish/config.fish’:

     if [ "$TERM" = "eterm-color" ]
       function osc7_send_pwd --on-event fish_prompt
         printf "\e]7;file://%s%s\e\\\\" (hostname) "$PWD"
       end
     end

such sequence are either ignored or understood by most terminals.  You
might already have it set up.


File: mistty.info,  Node: Multi-line prompts in Fish,  Next: VI mode in Fish,  Prev: Directory tracking in Fish,  Up: Fish

2.2.2.4 Multi-line prompts in Fish
..................................

‘fish’ automatically detects when a command is incomplete when you type
‘RET’ and launches a multi-line prompt, which MisTTY knows to navigate.

The cursor jumps over indent space while on such a prompt, just like in
a normal terminal.  ‘M-x customize-option mistty-skip-empty-spaces’
allows you to turn that on or off in a MisTTY buffer.


File: mistty.info,  Node: VI mode in Fish,  Next: Fancy prompts in Fish,  Prev: Multi-line prompts in Fish,  Up: Fish

2.2.2.5 VI mode in Fish
.......................

To communicate with ‘fish’, MisTTY requires the shell to be in its
default editing mode, that is, the emacs mode.  ‘Please make sure you
haven’t put readline or bash in vi mode before trying out MisTTY.’

To turn on vi mode in readline everywhere but in MisTTY, you can add
something like the following in ‘~/.zshrc’:

     if [ "$TERM" != "eterm-color" ]
       fish_vi_key_bindings
     end


File: mistty.info,  Node: Fancy prompts in Fish,  Prev: VI mode in Fish,  Up: Fish

2.2.2.6 Fancy prompts in Fish
.............................

MisTTY is known to work with powerline-shell prompts or Tide, on
Fish(1), including right prompts.

If you suspect that your shell prompt may be causing problems, try
configuring your shell to send out *note OSC 133: 29. codes to help
MisTTY correctly identify your prompt.

   ---------- Footnotes ----------

   (1) https://github.com/IlanCosman/tide


File: mistty.info,  Node: Zsh,  Next: IPython,  Prev: Fish,  Up: Shells

2.2.3 Zsh
---------

A recent version of Zsh is preferable.

Zsh supports bracketed paste, which MisTTY relies on, since version 5.1.
Older versions will work, but with limitations, and you might get
unexpected results if you yank text containing special characters.

* Menu:

* Autosuggestions in Zsh::
* Directory tracking in Zsh::
* Multi-line prompts in Zsh::
* VI mode in Zsh::
* Fancy prompts in Zsh::


File: mistty.info,  Node: Autosuggestions in Zsh,  Next: Directory tracking in Zsh,  Up: Zsh

2.2.3.1 Autosuggestions in Zsh
..............................

Fish-like ‘zsh’ autosuggestions work normally in MisTTY, if you’ve
turned these on.  However, the usual way of accepting an autosuggestion,
pressing the right arrow key, is very inconvenient as this is normally
bound to an Emacs point movement.

The recommended way of accepting an autosuggestion in MisTTY is to type
‘C-e’.  This works in normal terminals as well.


File: mistty.info,  Node: Directory tracking in Zsh,  Next: Multi-line prompts in Zsh,  Prev: Autosuggestions in Zsh,  Up: Zsh

2.2.3.2 Directory tracking in Zsh
.................................

Extend your prompt to send out an OSC7 sequence to have ‘zsh’ send the
current directory and hostname to MisTTY. To do that, you might add the
following to ‘~/.zshrc’:

     function osc7_precmd() {
       printf "\e]7;file://%s%s\e\\\\" "$HOSTNAME" "$PWD"
     }
     precmd_functions+=(osc7_precmd)

Such sequence are either ignored or understood by any well-behaved
terminals, so you shouldn’t need to check the terminal.


File: mistty.info,  Node: Multi-line prompts in Zsh,  Next: VI mode in Zsh,  Prev: Directory tracking in Zsh,  Up: Zsh

2.2.3.3 Multi-line prompts in Zsh
.................................

When you press ‘RET’ on an incomplete command, ‘zsh’ has the annoying
habit of starting a secondary prompt.  MisTTY doesn’t know how to go
back to the previous prompt from such a prompt.

To work around that, type ‘S-<return>’ instead of ‘RET’ while on the
terminal zone of a MisTTY buffer.  This sends a newline without running
the command.  You’ll then end up with one multi-line prompt that you can
edit normally.  This requires a version of Zsh that supports bracketed
paste mode, 5.1 or later.

You’ll get the same effect if you yank a multi-line command while in a
prompt or go up the command history to a previous multi-line command.

Please be aware that when editing a multi-line command in Zsh, MisTTY
may leave trailing spaces at the end of some lines.  In situations where
these are significant, you will need to remove trailing spaces using
‘C-d’ or ‘DEL’.


File: mistty.info,  Node: VI mode in Zsh,  Next: Fancy prompts in Zsh,  Prev: Multi-line prompts in Zsh,  Up: Zsh

2.2.3.4 VI mode in Zsh
......................

To communicate with ‘zsh’, MisTTY requires the shell to be in its
default editing mode, that is, the emacs mode.  ‘Please make sure you
haven’t put readline or bash in vi mode before trying out MisTTY.’

To turn on vi mode in readline everywhere but in MisTTY, you can add
something like the following in ‘~/.zshrc’:

     if [ "$TERM" != "eterm-color" ]; then
       bindkey -v
     fi


File: mistty.info,  Node: Fancy prompts in Zsh,  Prev: VI mode in Zsh,  Up: Zsh

2.2.3.5 Fancy prompts in Zsh
............................

MisTTY is compatible with right prompts and fancy multi-line prompts,
such as the ones created by powerlevel10k(1), though there are some
limitations.

Transient prompts can interfere with MisTTY’s commands, such as
‘mistty-previous-output’ (‘C-c C-p’) and
‘mistty-create-buffer-with-output’ (‘C-c C-r’).  If these commands are
important to you, disable transient prompts when ‘TERM’ is set to
‘eterm-color’.

When using a multi-line prompt, to ensure proper functionality,
configure your shell to send OSC 133 (Final Term) codes, at least A and
C, so MisTTY correctly recognizes the beginning and end of the prompt.
See *note OSC 133: 29.

The minimum configuration that would help MisTTY might look like this:

     function osc133_precmd() {
           printf '\033]133;A\007'
     }
     precmd_functions+=(osc133_precmd)

     function osc133_preexec() {
           printf '\033]133;C\007'
     }
     preexec_functions+=(osc133_preexec)

If you suspect that your shell prompt may be causing problems, try
configuring your shell to send out *note OSC 133 codes: 29. to help
MisTTY correctly identify your prompt.

   ---------- Footnotes ----------

   (1) https://github.com/romkatv/powerlevel10k


File: mistty.info,  Node: IPython,  Prev: Zsh,  Up: Shells

2.2.4 IPython
-------------

Editing, and cursor movements should work out of the box with ‘ipython’,
even in multi-line commands, ‘provided you use the default prompts’.

If you modified the ‘ipython’ prompts, you’ll need to teach MisTTY about
these prompts for multi-line movement and editing to work.

Go to ‘M-x configure-option mistty-move-vertically-regexps’ and add to
the list a regular expression that matches your prompt.  Make sure that
your regular expression is specific to your IPython prompt, as
mistakenly matching with ‘bash’ or ‘zsh’ would have rather catastrophic
results.

Go to ‘M-x configure-option mistty-multi-line-continue-prompts’ and add
to the list a regular expression that matches your IPython continue
prompt, that is, the prompt that IPython adds to the second and later
lines of input.  Again, be specific.  The regular expression shouldn’t
match any other prompts.  You don’t need to do anything here if you
configured IPython to not output any continue prompt.


File: mistty.info,  Node: Extending MisTTY,  Next: FAQ,  Prev: Shells,  Up: Contents

2.3 Extending MisTTY
====================

* Menu:

* Hooks::
* OSC Sequences::
* Writing Your Own Commands::
* Terminal Keymap::
* Auto-complete::
* Long-running commands::


File: mistty.info,  Node: Hooks,  Next: OSC Sequences,  Up: Extending MisTTY

2.3.1 Hooks
-----------

* Menu:

* mistty-mode-hook::
* mistty-interactive-insert-hook::
* mistty-after-process-start-hook::
* mistty-after-process-end-hook::
* mistty-entered-fullscreen-hook::
* mistty-left-fullscreen-hook::


File: mistty.info,  Node: mistty-mode-hook,  Next: mistty-interactive-insert-hook,  Up: Hooks

2.3.1.1 mistty-mode-hook
........................

The hook ‘mistty-mode-hook’ is called on every MisTTY buffer just after
creating the buffer and selecting a window for it but before executing
the shell, with the buffer selected.

If you have enabled autocomplete or autosuggestion globally, you might
want to disable it for MisTTY buffers from a function called by
‘mistty-mode-hook’.

This hook also provides a good time to rename the buffer, change its
directory or change environment variables, to be inherited by the
process.

For example, if you wanted a more generic name for the MisTTY buffers,
you could do:

     (defun my-lets-call-it-shell ()
       (rename-buffer (generate-new-buffer-name "*shell*")))
     (add-hook 'mistty-mode-hook #'my-lets-call-it-shell)


File: mistty.info,  Node: mistty-interactive-insert-hook,  Next: mistty-after-process-start-hook,  Prev: mistty-mode-hook,  Up: Hooks

2.3.1.2 mistty-interactive-insert-hook
......................................

‘mistty-interactive-insert-hook’ is a hook that is called when text is
typed in the terminal region.  It’s not called, for example, for text
that is inserted or displayed by the shell.

This hook provides an appropriate time to trigger auto-completion UI,
which, by default, doesn’t work in the terminal region, as discussed in
*note Auto-complete: 1c.

Auto-completion doesn’t work in the terminal region because it often
requires calling a post-command function.  To work around that, in most
case, it’s enough to just turn on the option ‘M-x customize-option
mistty-simulate-self-insert-command’, which enables the function
‘mistty-self-insert-command’, called by this hook by default.

This might not always work and have unintended effects, so you might
prefer to trigger the auto-completion UI yourself by adding your own
function to this hook and turning the above option off.


File: mistty.info,  Node: mistty-after-process-start-hook,  Next: mistty-after-process-end-hook,  Prev: mistty-interactive-insert-hook,  Up: Hooks

2.3.1.3 mistty-after-process-start-hook
.......................................

‘mistty-after-process-start-hook’ is a normal hook called from within a
new MisTTY work buffer just after starting the process, usually a shell.
The process itself is available as ‘mistty-proc’.  At the time this hook
is called, the buffer is typically empty, as no output from the process
has been processed.


File: mistty.info,  Node: mistty-after-process-end-hook,  Next: mistty-entered-fullscreen-hook,  Prev: mistty-after-process-start-hook,  Up: Hooks

2.3.1.4 mistty-after-process-end-hook
.....................................

‘mistty-after-process-end-hook’ is called from within a MisTTY work
buffer just after the process ended.  The process is passed as an
argument to the hook and its status can be accessed using
‘process-status’.

This can be used to, for example, kill the MisTTY work buffer after the
shell exits successfully, with ‘mistty-kill-buffer’ or
‘mistty-kill-buffer-and-window’.

     (add-hook 'mistty-after-process-end-hook
               'mistty-kill-buffer-and-window)


File: mistty.info,  Node: mistty-entered-fullscreen-hook,  Next: mistty-left-fullscreen-hook,  Prev: mistty-after-process-end-hook,  Up: Hooks

2.3.1.5 mistty-entered-fullscreen-hook
......................................

‘mistty-entered-fullscreen-hook’ is a normal hook called from within a
MisTTY work buffer just after switching to fullscreen mode.

In this mode, ‘mistty-fullscreen’ is non-nil and user commands run
within the terminal buffer, available as ‘mistty-term-buffer’.  The work
buffer is kept, but usually buried until ‘mistty-toggle-buffers’ is
called.


File: mistty.info,  Node: mistty-left-fullscreen-hook,  Prev: mistty-entered-fullscreen-hook,  Up: Hooks

2.3.1.6 mistty-left-fullscreen-hook
...................................

‘mistty-left-fullscreen-hook’ is a normal hook called from within a
MisTTY work buffer just after switching back to normal mode.

In this mode, ‘mistty-fullscreen’ is nil and user commands run in the
work buffer.


File: mistty.info,  Node: OSC Sequences,  Next: Writing Your Own Commands,  Prev: Hooks,  Up: Extending MisTTY

2.3.2 OSC Sequences
-------------------

OSC are “operating system command” control sequences.  MisTTY supports
some of these sequences and ignores the others.

By default, the supported sequences are OSC 2 (set window title), 7
(directory tracking, already mentioned in *note Directory Tracking: b.)
and 8 (hyperlinks), thanks to ‘ansi-osc.el’.

To add more, register handlers to ‘mistty-osc-handlers’.  The format is
the same as the handlers supported for ‘ansi-osc-handlers’ and can
usually be used interchangeably.

When working on OSC handlers for MisTTY, it’s important to keep the
following in mind: MisTTY separate buffers for the terminal (a
‘term-mode’ buffer) and for MisTTY itself.  The OSC handlers run in the
term-mode buffer.

One consequence of this is that if you set a buffer-local variable in a
handler, it won’t be available in the MisTTY buffer unless you register
it to ‘M-x configure-option mistty-variables-to-copy’

MisTTY provides helpers for writing OSC handlers that set text
properties:

   - The function ‘mistty-register-text-properties’ registers a set of
     text properties to set on any text written to the terminal until
     ‘mistty-unregister-text-properties’ is called with the same
     argument.


File: mistty.info,  Node: Writing Your Own Commands,  Next: Terminal Keymap,  Prev: OSC Sequences,  Up: Extending MisTTY

2.3.3 Writing Your Own Commands
-------------------------------

You might find the following functions useful if you’d like to write
commands that extend MisTTY’s behavior:

(mistty-mode): function

     This function sets the major mode of the current buffer to
     mistty-mode.  This only useful when followed by a call to
     ‘mistty-exec’, described below.

(mistty-exec PROGRAM &optional :width WIDTH :height HEIGHT)

     This functions starts PROGRAM in the current buffer, which must be
     a ‘mistty-mode’ buffer.

     PROGRAM is normally a list of executable and its argument.  It can
     also be a string containing only the executable, if no arguments to
     be set.

     It is a good idea to display the buffer before calling this
     function, because the size of the terminal when PROGRAM is started
     is taken from the windows displaying the buffer.

     Example:

          (with-current-buffer (generate-new-buffer "*terminal*")
            (mistty-mode)
            (pop-to-buffer (current-buffer))
            (mistty-exec '("bash" "-i")))

     If the buffer isn’t displayed, the terminal size is taken from the
     currently selected window, which might not be what you want.  You
     can also set an arbitrary terminal size by passing the :width and
     :height optional keyword arguments and calling
     ‘mistty-terminal-size-tracks-windows’ once the buffer has been tied
     to a window of a reasonable size, but that might cause a visible
     terminal refresh.

(mistty-send-string STR): function

     This function sends a string to the terminal, unmodified.  The
     string that is sent appear only after the function return - and it
     might not ever appear at all depending on the application attached
     to the terminal.  This is used to implement ‘mistty-sudo’ for
     example.

(mistty-on-prompt-p POS) : function

     This function returns non-nil if the POS is inside of a prompt
     MisTTY is aware of.  This is useful for writing commands that
     behave differently on a prompt than on program output, even while
     inside of the terminal zone.  It is used to implement
     ‘mistty-beginning-of-line’ for example.

(mistty-maybe-realize-possible-prompt &optional POS) : function

     This function might be useful to call in your commands to tell
     MisTTY that there’s likely a prompt at the current pointer position
     or at POS.

(mistty-before-positional) : function

     This function not only checks whether there’s a prompt at the
     position, but also attempt to move the terminal cursor to that
     position.


File: mistty.info,  Node: Terminal Keymap,  Next: Auto-complete,  Prev: Writing Your Own Commands,  Up: Extending MisTTY

2.3.4 Terminal Keymap
---------------------

To forward a key binding to the application attached to the terminal
‘mistty-send-key’ first needs to convert that key binding to something
applications will understand.  The translation is done by
‘mistty-translate-key’.

mistty-translate-key : function

     This function takes an Emacs key binding, as returned by ‘kbd’ and
     returns a string containing the sequence of characters that
     correspond to that key to send to the application tied to the
     terminal.

The default terminal keymap used by MisTTY mimics ‘xterm’ key bindings.
You might extend it or change it by changing the map
‘mistty-term-key-map’.

For example, you can change the string that correspond to the first
function keys from their default (”\eOP” - “\eOS”) as follows:

     (define-key mistty-term-key-map (kbd "<f1>") "\e[11~")
     (define-key mistty-term-key-map (kbd "<f2>") "\e[12~")
     (define-key mistty-term-key-map (kbd "<f3>") "\e[13~")
     (define-key mistty-term-key-map (kbd "<f4>") "\e[14~")

mistty-reverse-input-decode-map: function

     This function generates alternative values for
     ‘mistty-term-key-map’ for you if you’d like mimic another set of
     key bindings than xterm, for example, to generate a keymap that
     simulates rxvt, you might do:

          (load-library "term/rxvt.el")
          (mistty-reverse-input-decode-map rxvt-function-map)

‘mistty-reverse-input-decode-map.el’ is not included into the
distribution; it’s only available on github(1).

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/mistty/tree/master/extras


File: mistty.info,  Node: Auto-complete,  Next: Long-running commands,  Prev: Terminal Keymap,  Up: Extending MisTTY

2.3.5 Auto-complete
-------------------

Auto-complete is a completion UI that shows up automatically after some
delay, without having to call ‘completion-at-point’.  This used not to
work in MisTTY terminal region.  The hook
‘mistty-simulates-self-insert-command’ was introduced to fix that.  See
‘mistty-interactive-insert-hook’ in *note Hooks: 46.

By default this hook calls the buffer ‘pre-command-hook’ and
‘post-command-hook’ with ‘this-command’ set to ‘self-insert-command’, as
this is the way auto-complete is normally triggered.  This can be turned
off if necessary using the option on ‘M-x customize-option
mistty-simulate-self-insert-command’.

If the behavior described above doesn’t work for some packages, it
should be possible to build a custom bridge between this hook and the
auto-completion package.


File: mistty.info,  Node: Long-running commands,  Prev: Auto-complete,  Up: Extending MisTTY

2.3.6 Long-running commands
---------------------------

In Emacs, most editing tools are run as a single Emacs command, but some
tools span multiple Emacs command, for example, when you expand a
snippet with yasnippet(1), the snippet template is inserted into the
buffer, together with placeholders for you to fill some missing
information.

Filling in a template is a series of Emacs commands, that, together,
have a single effect: to insert a snippet of text.  MisTTY calls this a
long-running command.

When run in the terminal region, such long-running commands fail as
MisTTY sends the initial text to the shell, which echoes it back to be
redisplayed, possibly jumbling things and definitely destroying any
overlays.

To avoid such situations, MisTTY holds back sending text to the shell
until long-running commands are done.  For that to work, MisTTY needs to
know when such command start and end.

You can tell whether MisTTY thinks a long-running command is active, as
it displays ‘CMD’ in the modeline.  You can also do it programmatically:

mistty-long-running-running-command-p : function

     This function returns non-nil if MisTTY thinks a long-running
     command is active.

MisTTY detects some long-running commands by looking for overlays they
typically add to the buffer.  This can be extended with ‘M-x
customize-option mistty-foreign-overlay-properties’ or turned off with
‘M-x customize-option mistty-detect-foreign-overlays’.

To add a new property to ‘mistty-foreign-overlay-properties’, start the
interactive command, look for overlays with ‘overlays-in’ then get their
properties with ‘overlay-properties’.  You can then choose, on that
list, a property or face that identifies the feature or package.

If you find yourself extending ‘mistty-foreign-overlay-properties’,
please add an issue to ‘https://github.com/szermatt/mistty/issues/new’
so it can be integrated into the next version.

Alternatively, as not all long-running commands that can be confused by
MisTTY use overlays, you might need to tell MisTTY about them.  MisTTY
does it already for ‘completion-in-region’.

mistty-report-long-running-command : function

     This function can be called to tell MisTTY when a long-running
     command start and end.  It’s typically called from hooks provided
     by the package of the long-running command.

Here’s an example of code that would detect ‘completion-in-region-mode’
if MisTTY didn’t already do it:

     (defun my-completion-in-region ()
       (mistty-report-long-running-command
         'my-completion-in-region completion-in-region-mode))
     (defun my-detect-completion-in-region ()
        (add-hook 'completion-in-region-mode-hook
                  #'my-completion-in-region nil t))
     (add-hook 'mistty-mode-hook #'my-detect-completion-in-region)

   ---------- Footnotes ----------

   (1) https://github.com/joaotavora/yasnippet


File: mistty.info,  Node: FAQ,  Next: Contributing,  Prev: Extending MisTTY,  Up: Contents

2.4 FAQ
=======

‘The display is all messed up’

     First, check the value of the environment variable ‘TERM’.  It MUST
     be ‘eterm-color’ or ‘eterm-direct’; nothing else will work
     reliably.

     If that still doesn’t work, please file a bug as described in *note
     Reporting issues: 3.

‘warning: Could not set up terminal’

     If you’re getting errors such as the following from programs such
     as ‘less’ or ‘vi’, this means that the ‘TERM’ environment variable
     is set properly, but the host doesn’t know about the terminal
     ‘eterm-color’ or ‘eterm-direct’.

          warning: Could not set up terminal.
          warning: TERM environment variable set to 'eterm-color'.
          warning: Check that this terminal type is supported on this system.

     This might easily happen if you ssh into another host from inside a
     MisTTY buffer.  SSH typically forwards the value of the ‘TERM’
     environment variable, which contains the terminal name, but not
     ‘TERMCAP’ environment variable, which contains the terminal
     definition.

     To fix this issue, you can do any one of the following:

        - Connect using TRAMP, as described in *note Remote Shells with
          TRAMP: d.  TRAMP takes care of setting all necessary
          environment variables.

        - Add the definition of ‘eterm-color’ to all hosts you regularly
          log into.  To do that, follow the instructions in
          ‘<data-directory>/e/README’, where ‘<data-directory>’ is the
          “etc” directory of your Emacs installation, as shown by ‘M-x
          describe-variable data-directory’ - usually, that’s
          ‘/usr/share/emacs/<emacs version>/etc/e/README’

        - Tell ssh to forward the ‘TERMCAP’ environment variable.  This
          requires changing ‘both’ the server and client configuration.
          On the server ‘sshd_config’, add ‘AcceptEnv TERMCAP’.  On the
          client, add ‘SendEnv TERMCAP’ to ‘ssh_config’ or to
          ‘~/.ssh/config’

‘What are all those OCOCOCO or ODODODO that appear on the screen?’

     These are the terminal sequences that MisTTY sends to a program to
     move the cursor left or right.  If you see these printed on the
     terminal, it means that the program that’s currently controlling
     the terminal doesn’t support these.

     In such situation, you can:

        - Only type self-inserting characters and ‘DEL’.

        - Press ‘C-c C-q’ or ‘M-x mistty-send-key-sequence’ to send what
          you type directly to the terminal until you turn it off with
          ‘C-g’.

        - Write a regexp that identifies the situation and add it to
          ‘M-x customize-option mistty-forbid-edit-regexps’ so MisTTY
          knows it should not attempt to move the cursor.  The default
          value identifies most shell backward search prompts.

     See *note Terminal vs.  Scrollback: e. for more details.

‘The shell isn’t answering!’

     Press ‘C-g’.  If this is just a one-time thing, this will do the
     trick.

     If this keeps happening, check the modeline.  Does it contain CMD?
     It might look like this: ‘misTTY CMD:run’.  In that case, MisTTY is
     stuck in long-running command mode.  This is likely due to some
     package leaving overlays to the buffer that confuse MisTTY. To fix
     that, turn off the option ‘M-x customize-option
     mistty-detect-foreign-overlays’ or, if you know which package is
     causing trouble, remove the corresponding property in in ‘M-x
     customize-option mistty-foreign-overlay-properties’.

     For details, see *note Long-running commands: 1f.

     If this keeps happening and the modeline does not contain CMD, this
     is likely a bug.  For details on filing a bug report, see *note
     Reporting issues: 3.

‘Why is the cursor jumping around when I move it?’

     MisTTY jumps over spaces which just “aren’t there”, such as the
     spaces between the command and the right prompt, spaces added by
     ‘fish’ for indentation in multi-line prompts.

     If it doesn’t work with your shell or setup, or if you find it
     confusing, type ‘M-x customize-option mistty-skip-empty-spaces’ to
     turn it off.

‘What’s with the purple line?’

     This line indicates the region of the buffer that works as a
     terminal, meaning that it is not fully editable and that some
     shortcuts, such as ‘TAB’ are sent directly to the program
     controlling the terminal.

     This is covered in depth in *note Terminal vs.  Scrollback: e.

     If you just don’t want to see that line, turn it off with ‘M-x
     customize-option mistty-fring-enabled’

‘Why doesn’t <insert package here> work in the terminal region?’

     The terminal region of MisTTY behaves very differently from a
     normal buffer; many things can go wrong with commands that do more
     than just editing text.

     One such issue is with interactivly editing the buffer over
     multiple Emacs command, which MisTTY calls a long-running command.
     There are ways of making such commands work if they don’t already,
     described in *note Long-running commands: 1f.

     Another such issue is with autocomplete, with can also be made to
     work as described in *note Auto-complete: 1c.

     While this works with some packages, it might not necessarily work
     with the package you want - it might even not be possible to make
     it work, but we can always try.  Please file a bug(1) if you
     encounter such a package you’d like to work with MisTTY.

‘… but it used to work!’

     Older versions used to detect any unknown overlay as a long-running
     command, described in *note Long-running commands: 1f.
     Unfortunately, this caused problems with many packages which,
     leaving overlays around for a long time, prevented MisTTY from
     working at all.

     The good news is that it’s likely easy to make it work again by
     detecting the specific kind of overlays the package is using.
     Please see *note Long-running commands: 1f, or file a bug (*note
     Reporting issues: 3.) mentioning the package you’re using, its
     version and how you installed it.

‘Why am I getting connection errors from TRAMP?’

     MisTTY tries to track the current directory whenever possible,
     including from remote shells.  You might get connection errors if
     you connect to a remote or special shell from an existing MisTTY
     that Emacs cannot access through TRAMP and then Emacs tries to
     access a nonexisting remote file.

     The best solution in such case is to configure TRAMP to connect to
     that host, adding an entry to ‘M-x configure-option
     mistty-host-to-tramp-path-alist’, if that’s necessary.

     If that’s not possible or if you don’t want to bother, you might
     find it convenient to just disable the generation of TRAMP paths
     using ‘M-x customize-option mistty-allow-tramp-paths’.

     For more details, see *note Directory Tracking: b.

‘The buffer is killed when the shell finishes.  This didn’t use to
happen!’

     MisTTY now by default kills the buffer and its containing window
     when the shell ends.  If you don’t like that, change the option at
     ‘M-x customize-option mistty-at-end’ to do nothing.

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/mistty/issues


File: mistty.info,  Node: Contributing,  Prev: FAQ,  Up: Contents

2.5 Contributing
================

* Menu:

* Reporting issues::
* Suggesting features::
* Asking questions::
* Code contributions::
* Documentation contributions::


File: mistty.info,  Node: Reporting issues,  Next: Suggesting features,  Up: Contributing

2.5.1 Reporting issues
----------------------

At this time, the most useful thing you can do to help is and useful bug
reports to the Issue Tracker(1)

In your report, please discuss what you wanted to happen as well as what
happened.  Also, please include enough information to reproduce the
issue.  Such as:

   - the name and version of the program you were running - usually a
     shell

   - the version of Emacs you’re running, taken, for example, from ‘M-x
     about-emacs’

   - whether you’re running Emacs in a window environment or a terminal

   - what kind of prompt you’re using, that is, what it looks like, what
     character it ends with, how many lines it has and whether you’re
     using any kind of right prompt

If you can reproduce reliably, please include the content of the buffer
‘*mistty-log*’ into your report, as follows:

   - Enable logging by calling ‘M-x mistty-start-log’

   - Reproduce the issue

   - Go to the buffer ‘*mistty-log*’

   - Call ‘M-x mistty-stop-log’ to avoid getting more log entries

   - Copy the buffer content and paste it into the issue.  The log
     includes everything that you write to the terminal and everything
     that you get back from the terminal.  Please make sure you’re not
     including any private information, such as password - remove them
     if necessary…

If you cannot reproduce reliably,

   - go to ‘M-x customize-option mistty-backlog-size’ to set the backlog
     size to a large value, such as 50

   - use MisTTY normally, until the issue comes back

   - once it has happened again, immediately call ‘M-x
     mistty-start-log’.  The log will then contain entries for events
     that happened just ‘before’ you called the command.

   - call ‘M-x mistty-stop-log’

   - copy the content of the ‘*mistty-log*’ buffer, strip out anything
     private, and include it into the issue.

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/mistty/issues


File: mistty.info,  Node: Suggesting features,  Next: Asking questions,  Prev: Reporting issues,  Up: Contributing

2.5.2 Suggesting features
-------------------------

Please create a new discussion(1) in the Ideas category or add a feature
suggestions to the Issue Tracker(2).

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/mistty/discussions

   (2) https://github.com/szermatt/mistty/issues


File: mistty.info,  Node: Asking questions,  Next: Code contributions,  Prev: Suggesting features,  Up: Contributing

2.5.3 Asking questions
----------------------

Start a new discussion(1) with your question in the General category.

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/mistty/discussions


File: mistty.info,  Node: Code contributions,  Next: Documentation contributions,  Prev: Asking questions,  Up: Contributing

2.5.4 Code contributions
------------------------

To contribute code to the project, open a Pull Request(1).

Before you do that, please make sure the any new features is covered by
tests and that the tests pass.

To run the tests, install and setup eldev(2), then run ‘eldev test’.

Tests can also be run from inside of Emacs, using ‘M-x
ert-run-tests-interactively’ but when you do so, be aware that there
might be unexpected interaction with your Emacs configurations.  The
tests passing reliably when run using ‘eldev test’ is what matters.

Please also make sure your commit message follows Conventional Commits
1.0.0(3), in short, the commit message of new features should start with
“feat: “, fixes with “fix: “, refactorings with “refactor: ” and tests
with “test: “.

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/mistty/pulls

   (2) https://github.com/emacs-eldev/eldev

   (3) https://www.conventionalcommits.org/en/v1.0.0/


File: mistty.info,  Node: Documentation contributions,  Prev: Code contributions,  Up: Contributing

2.5.5 Documentation contributions
---------------------------------

You don’t need to be a developer to contribute!  Contribution to the
documentation or code comments are very welcome.  Please open a Pull
Request(1) with your proposed modifications.  To follow Conventional
Commits 1.0.0(2), the commit message should start with “docs: “

The documentation is written in reStructuredText.  You’ll need to
install Sphinx(3) to build it:

     python3 -m venv venv
     . venv/bin/activate # or activate.fish on fish
     pip3 install -r docs/requirements.txt

Then run ‘eldev html’ to build the documentation.

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/mistty/pulls

   (2) https://www.conventionalcommits.org/en/v1.0.0/

   (3) https://www.sphinx-doc.org


File: mistty.info,  Node: Index,  Prev: Contents,  Up: Top

Index
*****

 [index ]
* Menu:

* command; mistty:                       Launching.           (line  13)
* command; mistty-clear:                 Navigating the scrollback zone.
                                                              (line  34)
* command; mistty-create:                Launching.           (line  13)
* command; mistty-create-buffer-with-output: Navigating the scrollback zone.
                                                              (line  23)
* command; mistty-create-other-window:   Launching.           (line  13)
* command; mistty-docker:                Launching.           (line  59)
* command; mistty-end-of-line-goto-cursor: Navigating the scrollback zone.
                                                              (line   6)
* command; mistty-goto-cursor:           Navigating the scrollback zone.
                                                              (line   9)
* command; mistty-goto-next-input:       Navigating the scrollback zone.
                                                              (line  32)
* command; mistty-goto-previous-input:   Navigating the scrollback zone.
                                                              (line  27)
* command; mistty-in-project:            Launching.           (line  59)
* command; mistty-newline:               Terminal vs Scrollback.
                                                              (line 131)
* command; mistty-next-output:           Navigating the scrollback zone.
                                                              (line  16)
* command; mistty-other-window:          Launching.           (line  13)
* command; mistty-other-window <1>:      Launching.           (line  41)
* command; mistty-previous-output:       Navigating the scrollback zone.
                                                              (line  12)
* command; mistty-register-text-properties: OSC Sequences.    (line  29)
* command; mistty-select-output:         Navigating the scrollback zone.
                                                              (line  19)
* command; mistty-send-key:              Terminal vs Scrollback.
                                                              (line  85)
* command; mistty-send-key-sequence:     Terminal vs Scrollback.
                                                              (line 122)
* command; mistty-send-last-key:         Terminal vs Scrollback.
                                                              (line 110)
* command; mistty-ssh:                   Launching.           (line  59)
* command; mistty-start-log:             Reporting issues.    (line  25)
* command; mistty-stop-log:              Reporting issues.    (line  25)
* command; mistty-toggle-buffers:        Fullscreen Mode.     (line  15)
* command; mistty-unregister-text-properties: OSC Sequences.  (line  29)
* environment variable; ESHELL:          Launching.           (line  21)
* environment variable; SHELL:           Launching.           (line  21)
* ESHELL:                                Launching.           (line  21)
* function; mistty-before-position:      Writing Your Own Commands.
                                                              (line  65)
* function; mistty-exec:                 Writing Your Own Commands.
                                                              (line  15)
* function; mistty-long-running-command-p: Long-running commands.
                                                              (line  28)
* function; mistty-maybe-realize-possible-prompt: Writing Your Own Commands.
                                                              (line  59)
* function; mistty-mode:                 Writing Your Own Commands.
                                                              (line   9)
* function; mistty-on-prompt-p:          Writing Your Own Commands.
                                                              (line  51)
* function; mistty-report-long-running-command: Long-running commands.
                                                              (line  51)
* function; mistty-reverse-input-decode-map: Terminal Keymap. (line  30)
* function; mistty-send-string:          Writing Your Own Commands.
                                                              (line  43)
* function; mistty-translate-key:        Terminal Keymap.     (line   6)
* hook; mistty-interactive-interactive:  mistty-mode-hook.    (line  24)
* hook; mistty-mode-hook:                mistty-mode-hook.    (line   6)
* map; mistty-forbid-edit-map:           Backward Search.     (line   6)
* map; mistty-mode-map:                  Terminal vs Scrollback.
                                                              (line  78)
* map; mistty-prompt-map:                Terminal vs Scrollback.
                                                              (line  78)
* map; mistty-term-key-map:              Terminal Keymap.     (line   6)
* option; mistty-detect-foreign-overlays: Long-running commands.
                                                              (line  33)
* option; mistty-foreign-overlay-properties: Long-running commands.
                                                              (line  33)
* SHELL:                                 Launching.           (line  21)
* variable; explicit-shell-file-name:    Launching.           (line  13)
* variable; mistty-allow-clearing-scrollback: Navigating the scrollback zone.
                                                              (line  34)
* variable; mistty-allow-tramp-path:     Directory tracking and TRAMP.
                                                              (line   6)
* variable; mistty-at-end:               FAQ.                 (line 169)
* variable; mistty-buffer-name:          Launching.           (line  13)
* variable; mistty-detect-foreign-overlays: Long-running commands.
                                                              (line  33)
* variable; mistty-forbid-edit-map:      Backward Search.     (line   6)
* variable; mistty-forbid-edit-regexps:  Backward Search.     (line   6)
* variable; mistty-forbid-edit-regexps <1>: FAQ.              (line  53)
* variable; mistty-foreign-overlay-properties: Long-running commands.
                                                              (line  33)
* variable; mistty-host-to-tramp-path-alist: Directory tracking and TRAMP.
                                                              (line   6)
* variable; mistty-interactive-insert-hook: mistty-mode-hook. (line  25)
* variable; mistty-mode-hook:            mistty-mode-hook.    (line   6)
* variable; mistty-move-vertically-regexps: IPython.          (line   9)
* variable; mistty-multi-line-continue-prompts: IPython.      (line   9)
* variable; mistty-osc-handlers:         OSC Sequences.       (line  13)
* variable; mistty-set-EMACS:            Directory tracking in Bash.
                                                              (line   6)
* variable; mistty-shell-command:        Launching.           (line  13)
* variable; mistty-simulate-self-insert-command: Auto-complete.
                                                              (line   6)
* variable; mistty-skip-empty-spaces:    Multi-line prompts in Fish.
                                                              (line   9)
* variable; mistty-variables-to-copy:    OSC Sequences.       (line  22)
* variable; mistty-wrap-capf-functions:  Autosuggestions.     (line   6)
* variable; shell-file-name:             Launching.           (line  13)



Tag Table:
Node: Top371
Ref: index doc571
Ref: 0571
Node: Comparison with other packages1900
Ref: index comparison-with-other-packages1999
Ref: 41999
Ref: index mistty1999
Ref: 51999
Ref: Comparison with other packages-Footnote-13717
Ref: Comparison with other packages-Footnote-23766
Ref: Comparison with other packages-Footnote-33810
Node: Contents3856
Ref: index contents3957
Ref: 63957
Node: Usage4057
Ref: usage doc4122
Ref: 74122
Ref: usage usage4122
Ref: 84122
Node: Installation4529
Ref: usage id14601
Ref: 94601
Ref: usage installation4601
Ref: a4601
Ref: Installation-Footnote-15263
Node: Launching5307
Ref: usage id25410
Ref: c5410
Ref: usage launching5410
Ref: 15410
Node: Terminal vs Scrollback8815
Ref: usage term-vs-scroll8936
Ref: e8936
Ref: usage terminal-vs-scrollback8936
Ref: f8936
Node: Navigating the scrollback zone14330
Ref: usage navigating-the-scrollback-zone14457
Ref: 1314457
Ref: usage navigation14457
Ref: 1414457
Ref: Navigating the scrollback zone-Footnote-117510
Node: Fullscreen Mode17559
Ref: usage fullscreen17679
Ref: 217679
Ref: usage fullscreen-mode17679
Ref: 1717679
Node: Command History18394
Ref: usage command-history18499
Ref: 1818499
Ref: usage history18499
Ref: 1518499
Node: Backward Search19437
Ref: usage backward-search19546
Ref: 1919546
Ref: usage bs19546
Ref: 1019546
Node: Completion-at-point20528
Ref: usage cap20640
Ref: 1a20640
Ref: usage completion-at-point20640
Ref: 1b20640
Ref: Completion-at-point-Footnote-121692
Ref: Completion-at-point-Footnote-221731
Node: Autosuggestions21769
Ref: usage autosuggestions21840
Ref: 1d21840
Node: Template Expansion22856
Ref: usage template-expansion22971
Ref: 1e22971
Ref: Template Expansion-Footnote-123581
Ref: Template Expansion-Footnote-223621
Node: Directory Tracking23669
Ref: usage directory-tracking23789
Ref: 2023789
Ref: usage dirtrack23789
Ref: b23789
Node: Remote Shells with TRAMP24502
Ref: usage remote-shells24632
Ref: d24632
Ref: usage remote-shells-with-tramp24632
Ref: 2324632
Node: Directory tracking and TRAMP26116
Ref: usage directory-tracking-and-tramp26254
Ref: 2426254
Ref: usage tramp-dirtrack26254
Ref: 2526254
Node: Keybindings used by MisTTY29228
Ref: usage keybindings29373
Ref: 1229373
Ref: usage keybindings-used-by-mistty29373
Ref: 2729373
Node: Supported OSC Control Sequences30902
Ref: usage osc31010
Ref: 1631010
Ref: usage supported-osc-control-sequences31010
Ref: 2831010
Ref: usage osc13333077
Ref: 2933077
Ref: Supported OSC Control Sequences-Footnote-135268
Ref: Supported OSC Control Sequences-Footnote-235319
Ref: Supported OSC Control Sequences-Footnote-335406
Ref: Supported OSC Control Sequences-Footnote-435470
Node: Shells35551
Ref: shells doc35641
Ref: 2b35641
Ref: shells id135641
Ref: 2c35641
Ref: shells shells35641
Ref: 1135641
Node: Bash35712
Ref: shells bash35772
Ref: 2d35772
Ref: shells id235772
Ref: 2e35772
Node: Multi-line prompts in Bash36540
Ref: shells multi-line-prompts-in-bash36642
Ref: 2f36642
Node: Directory tracking in Bash37618
Ref: shells bash-dirtrack37744
Ref: 2637744
Ref: shells directory-tracking-in-bash37744
Ref: 3037744
Node: VI mode in Bash39302
Ref: shells vi-mode-in-bash39423
Ref: 3139423
Node: Fancy prompts in Bash40006
Ref: shells fancy-prompts-in-bash40092
Ref: 3240092
Ref: Fancy prompts in Bash-Footnote-140544
Node: Fish40594
Ref: shells fish40666
Ref: 3340666
Ref: shells id340666
Ref: 3440666
Node: Autosuggestions in Fish40991
Ref: shells autosuggestions-in-fish41087
Ref: 3541087
Node: Command History in Fish41481
Ref: shells command-history-in-fish41612
Ref: 3641612
Node: Directory tracking in Fish42544
Ref: shells directory-tracking-in-fish42678
Ref: 3742678
Ref: shells fish-dirtrack42678
Ref: 2142678
Node: Multi-line prompts in Fish43383
Ref: shells multi-line-prompts-in-fish43509
Ref: 3843509
Node: VI mode in Fish43932
Ref: shells vi-mode-in-fish44053
Ref: 3944053
Node: Fancy prompts in Fish44510
Ref: shells fancy-prompts-in-fish44596
Ref: 3a44596
Ref: Fancy prompts in Fish-Footnote-144968
Node: Zsh45011
Ref: shells id445086
Ref: 3b45086
Ref: shells zsh45086
Ref: 3c45086
Node: Autosuggestions in Zsh45495
Ref: shells autosuggestions-in-zsh45591
Ref: 3d45591
Node: Directory tracking in Zsh46031
Ref: shells directory-tracking-in-zsh46161
Ref: 3e46161
Ref: shells zsh-dirtrack46161
Ref: 2246161
Node: Multi-line prompts in Zsh46666
Ref: shells multi-line-prompts-in-zsh46788
Ref: 3f46788
Node: VI mode in Zsh47758
Ref: shells vi-mode-in-zsh47875
Ref: 4047875
Node: Fancy prompts in Zsh48324
Ref: shells fancy-prompts-in-zsh48407
Ref: 4148407
Ref: Fancy prompts in Zsh-Footnote-149647
Node: IPython49696
Ref: shells id549758
Ref: 4249758
Ref: shells ipython49758
Ref: 4349758
Node: Extending MisTTY50789
Ref: extensions doc50877
Ref: 4450877
Ref: extensions extending-mistty50877
Ref: 4550877
Node: Hooks51052
Ref: extensions hooks51132
Ref: 4651132
Ref: extensions id151132
Ref: 4751132
Node: mistty-mode-hook51360
Ref: extensions mistty-mode-hook51457
Ref: 4851457
Node: mistty-interactive-insert-hook52241
Ref: extensions mistty-interactive-insert-hook52378
Ref: 4952378
Node: mistty-after-process-start-hook53362
Ref: extensions mistty-after-process-start-hook53512
Ref: 4a53512
Node: mistty-after-process-end-hook53912
Ref: extensions mistty-after-process-end-hook54062
Ref: 4b54062
Node: mistty-entered-fullscreen-hook54621
Ref: extensions mistty-entered-fullscreen-hook54767
Ref: 4c54767
Node: mistty-left-fullscreen-hook55211
Ref: extensions mistty-left-fullscreen-hook55319
Ref: 4d55319
Node: OSC Sequences55614
Ref: extensions ext-osc55728
Ref: 2a55728
Ref: extensions osc-sequences55728
Ref: 4e55728
Node: Writing Your Own Commands57003
Ref: extensions custom-commands57127
Ref: 4f57127
Ref: extensions writing-your-own-commands57127
Ref: 5057127
Node: Terminal Keymap59755
Ref: extensions term-keymap59879
Ref: 5159879
Ref: extensions terminal-keymap59879
Ref: 5259879
Ref: Terminal Keymap-Footnote-161482
Node: Auto-complete61544
Ref: extensions auto-complete61664
Ref: 5361664
Ref: extensions autocomplete61664
Ref: 1c61664
Node: Long-running commands62518
Ref: extensions long-running-commands62614
Ref: 5462614
Ref: extensions lrc62614
Ref: 1f62614
Ref: Long-running commands-Footnote-165505
Node: FAQ65553
Ref: faq doc65647
Ref: 5565647
Ref: faq faq65647
Ref: 5665647
Ref: FAQ-Footnote-173175
Node: Contributing73225
Ref: contrib doc73294
Ref: 5773294
Ref: contrib contributing73294
Ref: 5873294
Node: Reporting issues73460
Ref: contrib reporting73553
Ref: 373553
Ref: contrib reporting-issues73553
Ref: 5973553
Ref: Reporting issues-Footnote-175518
Node: Suggesting features75568
Ref: contrib discussion75686
Ref: 5a75686
Ref: contrib suggesting-features75686
Ref: 5b75686
Ref: Suggesting features-Footnote-175886
Ref: Suggesting features-Footnote-275941
Node: Asking questions75991
Ref: contrib asking-questions76111
Ref: 5c76111
Ref: Asking questions-Footnote-176265
Node: Code contributions76320
Ref: contrib code-contributions76448
Ref: 5d76448
Ref: Code contributions-Footnote-177290
Ref: Code contributions-Footnote-277339
Ref: Code contributions-Footnote-377384
Node: Documentation contributions77439
Ref: contrib documentation-contributions77542
Ref: 5e77542
Ref: contrib eldev77542
Ref: 5f77542
Ref: Documentation contributions-Footnote-178202
Ref: Documentation contributions-Footnote-278251
Ref: Documentation contributions-Footnote-378306
Node: Index78341

End Tag Table


Local Variables:
coding: utf-8
End:
